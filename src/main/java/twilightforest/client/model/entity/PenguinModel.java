// Date: 3/3/2012 11:56:45 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package twilightforest.client.model.entity;

import com.google.common.collect.ImmutableList;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.AgeableListModel;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.util.Mth;
import twilightforest.entity.passive.PenguinEntity;

public class PenguinModel extends AgeableListModel<PenguinEntity> {
	//fields
	ModelPart body;
	ModelPart rightarm;
	ModelPart leftarm;
	ModelPart rightleg;
	ModelPart leftleg;
	ModelPart head;
	ModelPart beak;

	public PenguinModel() {
		texWidth = 64;
		texHeight = 32;

		body = new ModelPart(this, 32, 0);
		body.addBox(-4F, 0F, -4F, 8, 9, 8);
		body.setPos(0F, 14F, 0F);

		rightarm = new ModelPart(this, 34, 18);
		rightarm.addBox(-1F, -1F, -2F, 1, 8, 4);
		rightarm.setPos(-4F, 15F, 0F);

		leftarm = new ModelPart(this, 24, 18);
		leftarm.addBox(0F, -1F, -2F, 1, 8, 4);
		leftarm.setPos(4F, 15F, 0F);

		leftarm.mirror = true;

		rightleg = new ModelPart(this, 0, 16);
		rightleg.addBox(-2F, 0F, -5F, 4, 1, 8);
		rightleg.setPos(-2F, 23F, 0F);
		rightleg.setTexSize(64, 32);

		leftleg = new ModelPart(this, 0, 16);
		leftleg.addBox(-2F, 0F, -5F, 4, 1, 8);
		leftleg.setPos(2F, 23F, 0F);


		head = new ModelPart(this, 0, 0);
		head.addBox(-3.5F, -4F, -3.5F, 7, 5, 7);
		head.setPos(0F, 13F, 0F);

		beak = new ModelPart(this, 0, 13);
		beak.addBox(-1F, 0F, -1F, 2, 1, 2);
		beak.setPos(0F, -1F, -4F);

		head.addChild(beak);
	}

	@Override
	protected Iterable<ModelPart> headParts() {
		return ImmutableList.of(this.head);
	}

	@Override
	protected Iterable<ModelPart> bodyParts() {
		return ImmutableList.of(
				body,
				rightleg,
				leftleg,
				rightarm,
				leftarm
		);
	}

	/**
	 * Sets the models various rotation angles then renders the model.
	 */
	@Override
	public void renderToBuffer(PoseStack stack, VertexConsumer builder, int light, int overlay, float red, float green, float blue, float scale) {
		if (young) {
			float f = 2.0F;
			stack.pushPose();
			stack.scale(1.0F / f, 1.0F / f, 1.0F / f);
			stack.translate(0.0F, 1.5F * scale, 0.0F);
			this.headParts().forEach((renderer) -> renderer.render(stack, builder, light, overlay, red, green, blue, scale));
			stack.popPose();

			stack.pushPose();
			stack.scale(1.0F / f, 1.0F / f, 1.0F / f);
			stack.translate(0.0F, 1.5F * scale, 0.0F);
			this.bodyParts().forEach((renderer) -> renderer.render(stack, builder, light, overlay, red, green, blue, scale));
			stack.popPose();
		} else {
			this.headParts().forEach((renderer) -> renderer.render(stack, builder, light, overlay, red, green, blue, scale));
			this.bodyParts().forEach((renderer) -> renderer.render(stack, builder, light, overlay, red, green, blue, scale));
		}
	}

	@Override
	public void setupAnim(PenguinEntity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		head.xRot = headPitch / (180F / (float) Math.PI);
		head.yRot = netHeadYaw / (180F / (float) Math.PI);

		rightleg.xRot = Mth.cos(limbSwing) * 0.7F * limbSwingAmount;
		leftleg.xRot = Mth.cos(limbSwing + (float) Math.PI) * 0.7F * limbSwingAmount;

		rightarm.zRot = ageInTicks;
		leftarm.zRot = -ageInTicks;
	}
}
