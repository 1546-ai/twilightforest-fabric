package twilightforest.block;

import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraft.world.item.Item;
import net.minecraft.core.Direction;
import net.minecraftforge.common.ToolType;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fmllegacy.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import twilightforest.TwilightForestMod;
import twilightforest.compat.TFCompat;
import twilightforest.enums.*;
import twilightforest.item.TFItems;
import twilightforest.world.feature.tree.*;

import javax.annotation.Nonnull;

import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.ComposterBlock;
import net.minecraft.world.level.block.DoorBlock;
import net.minecraft.world.level.block.FenceBlock;
import net.minecraft.world.level.block.FenceGateBlock;
import net.minecraft.world.level.block.FireBlock;
import net.minecraft.world.level.block.FlowerPotBlock;
import net.minecraft.world.level.block.HalfTransparentBlock;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.world.level.block.PressurePlateBlock;
import net.minecraft.world.level.block.RotatedPillarBlock;
import net.minecraft.world.level.block.SaplingBlock;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.StairBlock;
import net.minecraft.world.level.block.StandingSignBlock;
import net.minecraft.world.level.block.TrapDoorBlock;
import net.minecraft.world.level.block.WoodButtonBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.WoodType;

@SuppressWarnings({"WeakerAccess", "unused"})
@Nonnull
@Mod.EventBusSubscriber(modid = TwilightForestMod.ID, bus = Mod.EventBusSubscriber.Bus.MOD)
public class TFBlocks {
	public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, TwilightForestMod.ID);

	public static final RegistryObject<RotatedPillarBlock> oak_log                = BLOCKS.register("twilight_oak_log", () -> new TFLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> canopy_log             = BLOCKS.register("canopy_log", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> mangrove_log           = BLOCKS.register("mangrove_log", () -> new TFLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> dark_log               = BLOCKS.register("dark_log", () -> new TFLogBlock(logProperties(MaterialColor.COLOR_BROWN, MaterialColor.STONE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_oak_log       = BLOCKS.register("stripped_twilight_oak_log", () -> new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_canopy_log    = BLOCKS.register("stripped_canopy_log", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_mangrove_log  = BLOCKS.register("stripped_mangrove_log", () -> new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_dark_log      = BLOCKS.register("stripped_dark_log", () -> new TFLogBlock(logProperties(MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> oak_wood               = BLOCKS.register("twilight_oak_wood", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> canopy_wood            = BLOCKS.register("canopy_wood", () -> new TFLogBlock(logProperties(MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> mangrove_wood          = BLOCKS.register("mangrove_wood", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> dark_wood              = BLOCKS.register("dark_wood", () -> new TFLogBlock(logProperties(MaterialColor.STONE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_oak_wood      = BLOCKS.register("stripped_twilight_oak_wood", () -> new TFLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_canopy_wood   = BLOCKS.register("stripped_canopy_wood", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_mangrove_wood = BLOCKS.register("stripped_mangrove_wood", () -> new TFLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_dark_wood     = BLOCKS.register("stripped_dark_wood", () -> new TFLogBlock(logProperties(MaterialColor.COLOR_ORANGE, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> oak_leaves                 = BLOCKS.register("twilight_oak_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.GRASS).harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> canopy_leaves              = BLOCKS.register("canopy_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.GRASS).harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> mangrove_leaves            = BLOCKS.register("mangrove_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.GRASS).harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> dark_leaves                = BLOCKS.register("dark_leaves", () -> new DarkLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(2.0F, 10.0F).sound(SoundType.GRASS).harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> rainboak_leaves            = BLOCKS.register("rainboak_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.GRASS).harvestTool(ToolType.HOE)));
	public static final RegistryObject<TFPortalBlock> twilight_portal    = BLOCKS.register("twilight_portal", () -> new TFPortalBlock(BlockBehaviour.Properties.of(Material.PORTAL).strength(-1.0F).sound(SoundType.GLASS).lightLevel((state) -> 11).noCollission().noOcclusion().noDrops()));
	public static final RegistryObject<Block> maze_stone                 = BLOCKS.register("maze_stone", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_brick           = BLOCKS.register("maze_stone_brick", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_chiseled        = BLOCKS.register("maze_stone_chiseled", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_decorative      = BLOCKS.register("maze_stone_decorative", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_cracked         = BLOCKS.register("maze_stone_cracked", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_mossy           = BLOCKS.register("maze_stone_mossy", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_mosaic          = BLOCKS.register("maze_stone_mosaic", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> maze_stone_border          = BLOCKS.register("maze_stone_border", () -> new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> hedge                      = BLOCKS.register("hedge", () -> new HedgeBlock(BlockBehaviour.Properties.of(Material.CACTUS).harvestTool(ToolType.AXE).strength(2.0F, 10.0F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> boss_spawner_naga          = BLOCKS.register("boss_spawner_naga", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.NAGA));
	public static final RegistryObject<Block> boss_spawner_lich          = BLOCKS.register("boss_spawner_lich", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.LICH));
	public static final RegistryObject<Block> boss_spawner_hydra         = BLOCKS.register("boss_spawner_hydra", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.HYDRA));
	public static final RegistryObject<Block> boss_spawner_ur_ghast      = BLOCKS.register("boss_spawner_ur_ghast", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.UR_GHAST));
	public static final RegistryObject<Block> boss_spawner_knight_phantom = BLOCKS.register("boss_spawner_knight_phantom", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.KNIGHT_PHANTOM));
	public static final RegistryObject<Block> boss_spawner_snow_queen    = BLOCKS.register("boss_spawner_snow_queen", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.SNOW_QUEEN));
	public static final RegistryObject<Block> boss_spawner_minoshroom    = BLOCKS.register("boss_spawner_minoshroom", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.MINOSHROOM));
	public static final RegistryObject<Block> boss_spawner_alpha_yeti    = BLOCKS.register("boss_spawner_alpha_yeti", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.ALPHA_YETI));
	public static final RegistryObject<Block> boss_spawner_final_boss    = BLOCKS.register("boss_spawner_final_boss", () -> new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.FINAL_BOSS));
	public static final RegistryObject<Block> firefly_jar                = BLOCKS.register("firefly_jar", () -> new JarBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 0.0F).sound(SoundType.WOOD).lightLevel((state) -> 15).noOcclusion()));
	public static final RegistryObject<Block> cicada_jar                 = BLOCKS.register("cicada_jar", () -> new JarBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 0.0F).sound(SoundType.WOOD).noOcclusion().randomTicks()));
	public static final RegistryObject<Block> moss_patch                 = BLOCKS.register("moss_patch", () -> new TFPlantBlock(PlantVariant.MOSSPATCH, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final RegistryObject<Block> mayapple                   = BLOCKS.register("mayapple", () -> new TFPlantBlock(PlantVariant.MAYAPPLE, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final RegistryObject<Block> clover_patch               = BLOCKS.register("clover_patch", () -> new TFPlantBlock(PlantVariant.CLOVERPATCH, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final RegistryObject<Block> fiddlehead                 = BLOCKS.register("fiddlehead", () -> new TFPlantBlock(PlantVariant.FIDDLEHEAD, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final RegistryObject<Block> mushgloom                  = BLOCKS.register("mushgloom", () -> new TFPlantBlock(PlantVariant.MUSHGLOOM, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion().lightLevel((state) -> 3)));
	public static final RegistryObject<Block> torchberry_plant           = BLOCKS.register("torchberry_plant", () -> new TFPlantBlock(PlantVariant.TORCHBERRY, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion().lightLevel((state) -> 8)));
	public static final RegistryObject<Block> root_strand                = BLOCKS.register("root_strand", () -> new TFPlantBlock(PlantVariant.ROOT_STRAND, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final RegistryObject<Block> fallen_leaves              = BLOCKS.register("fallen_leaves", () -> new TFPlantBlock(PlantVariant.FALLEN_LEAVES, BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final RegistryObject<Block> root                       = BLOCKS.register("root", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> liveroot_block             = BLOCKS.register("liveroot_block", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> uncrafting_table           = BLOCKS.register("uncrafting_table", UncraftingTableBlock::new);
	public static final RegistryObject<Block> smoker                     = BLOCKS.register("smoker", () -> new TFSmokerBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.GRASS).strength(1.5F, 0.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> encased_smoker             = BLOCKS.register("encased_smoker", () -> new EncasedSmokerBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(1.5F, 0.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> fire_jet                   = BLOCKS.register("fire_jet", () -> new FireJetBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.GRASS).strength(1.5F, 0.0F).sound(SoundType.WOOD).randomTicks().lightLevel((state) -> state.getValue(FireJetBlock.STATE) != FireJetVariant.FLAME ? 0 : 15)));
	public static final RegistryObject<Block> encased_fire_jet           = BLOCKS.register("encased_fire_jet", () -> new EncasedFireJetBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(1.5F, 0.0F).sound(SoundType.WOOD).lightLevel((state) -> 15)));
	public static final RegistryObject<Block> naga_stone_head            = BLOCKS.register("naga_stone_head", () -> new TFHorizontalBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> naga_stone                 = BLOCKS.register("naga_stone", () -> new NagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<SaplingBlock> oak_sapling            = BLOCKS.register("twilight_oak_sapling", () -> new SaplingBlock(new SmallOakTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> canopy_sapling         = BLOCKS.register("canopy_sapling", () -> new SaplingBlock(new CanopyTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> mangrove_sapling       = BLOCKS.register("mangrove_sapling", () -> new MangroveSaplingBlock(new MangroveTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> darkwood_sapling       = BLOCKS.register("darkwood_sapling", () -> new SaplingBlock(new DarkCanopyTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> hollow_oak_sapling     = BLOCKS.register("hollow_oak_sapling", () -> new SaplingBlock(new HollowTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> time_sapling           = BLOCKS.register("time_sapling", () -> new SaplingBlock(new TimeTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> transformation_sapling = BLOCKS.register("transformation_sapling", () -> new SaplingBlock(new TransformationTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> mining_sapling         = BLOCKS.register("mining_sapling", () -> new SaplingBlock(new MinersTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> sorting_sapling        = BLOCKS.register("sorting_sapling", () -> new SaplingBlock(new SortingTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<SaplingBlock> rainboak_sapling       = BLOCKS.register("rainboak_sapling", () -> new SaplingBlock(new RainboakTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<RotatedPillarBlock> time_log                     = BLOCKS.register("time_log", () -> new TFLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> transformation_log           = BLOCKS.register("transformation_log", () -> new TFLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> mining_log                   = BLOCKS.register("mining_log", () -> new TFLogBlock(logProperties(MaterialColor.SAND, MaterialColor.QUARTZ).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> sorting_log                  = BLOCKS.register("sorting_log", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_time_log            = BLOCKS.register("stripped_time_log", () -> new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_transformation_log  = BLOCKS.register("stripped_transformation_log", () -> new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_mining_log          = BLOCKS.register("stripped_mining_log", () -> new TFLogBlock(logProperties(MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_sorting_log         = BLOCKS.register("stripped_sorting_log", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> time_wood                    = BLOCKS.register("time_wood", () -> new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> transformation_wood          = BLOCKS.register("transformation_wood", () -> new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> mining_wood                  = BLOCKS.register("mining_wood", () -> new TFLogBlock(logProperties(MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> sorting_wood                 = BLOCKS.register("sorting_wood", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_time_wood           = BLOCKS.register("stripped_time_wood", () -> new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_transformation_wood = BLOCKS.register("stripped_transformation_wood", () -> new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_mining_wood         = BLOCKS.register("stripped_mining_wood", () -> new TFLogBlock(logProperties(MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<RotatedPillarBlock> stripped_sorting_wood        = BLOCKS.register("stripped_sorting_wood", () -> new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> time_log_core              = BLOCKS.register("time_log_core", () -> new SpecialMagicLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.PODZOL), MagicWoodVariant.TIME));
	public static final RegistryObject<Block> transformation_log_core    = BLOCKS.register("transformation_log_core", () -> new SpecialMagicLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.PODZOL), MagicWoodVariant.TRANS));
	public static final RegistryObject<Block> mining_log_core            = BLOCKS.register("mining_log_core", () -> new SpecialMagicLogBlock(logProperties(MaterialColor.SAND, MaterialColor.QUARTZ), MagicWoodVariant.MINE));
	public static final RegistryObject<Block> sorting_log_core           = BLOCKS.register("sorting_log_core", () -> new SpecialMagicLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN), MagicWoodVariant.SORT));
	public static final RegistryObject<Block> time_leaves                = BLOCKS.register("time_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.GRASS).randomTicks().noOcclusion().harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> transformation_leaves      = BLOCKS.register("transformation_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.GRASS).randomTicks().noOcclusion().harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> mining_leaves              = BLOCKS.register("mining_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.GRASS).randomTicks().noOcclusion().harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> sorting_leaves             = BLOCKS.register("sorting_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.GRASS).randomTicks().noOcclusion().harvestTool(ToolType.HOE)));
	public static final RegistryObject<Block> firefly                    = BLOCKS.register("firefly", () -> new FireflyBlock(BlockBehaviour.Properties.of(new Material.Builder(MaterialColor.NONE).noCollider().nonSolid().replaceable().build()).lightLevel((state) -> 15).sound(SoundType.SLIME_BLOCK).strength(0.0F).noCollission()));
	public static final RegistryObject<Block> cicada                     = BLOCKS.register("cicada", () -> new CicadaBlock(BlockBehaviour.Properties.of(new Material.Builder(MaterialColor.NONE).noCollider().nonSolid().replaceable().build()).sound(SoundType.SLIME_BLOCK).strength(0.0F).noCollission()));
	public static final RegistryObject<Block> moonworm                   = BLOCKS.register("moonworm", () -> new MoonwormBlock(BlockBehaviour.Properties.of(new Material.Builder(MaterialColor.NONE).noCollider().nonSolid().replaceable().build()).lightLevel((state) -> 14).sound(SoundType.SLIME_BLOCK).strength(0.0F).noCollission()));
	public static final RegistryObject<Block> tower_wood                 = BLOCKS.register("tower_wood", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> tower_wood_encased         = BLOCKS.register("tower_wood_encased", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> tower_wood_cracked         = BLOCKS.register("tower_wood_cracked", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> tower_wood_mossy           = BLOCKS.register("tower_wood_mossy", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> tower_wood_infested        = BLOCKS.register("tower_wood_infested", () -> new InfestedTowerwoodBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(0.75F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> reappearing_block          = BLOCKS.register("reappearing_block", () -> new ReappearingBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> 4)));
	// FIXME Split Vanishing block into regular breakable variant, and then the unbreakable variant
	public static final RegistryObject<Block> vanishing_block            = BLOCKS.register("vanishing_block", () -> new VanishingBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(-1.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(VanishingBlock.ACTIVE) ? 4 : 0)));
	public static final RegistryObject<Block> locked_vanishing_block     = BLOCKS.register("locked_vanishing_block", () -> new LockedVanishingBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(-1.0F, 35.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> carminite_builder          = BLOCKS.register("carminite_builder", () -> new BuilderBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(BuilderBlock.STATE) == TowerDeviceVariant.BUILDER_ACTIVE ? 4 : 0)));
	public static final RegistryObject<Block> built_block                = BLOCKS.register("built_block", () -> new TranslucentBuiltBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(50.0F, 2000.0F).sound(SoundType.METAL).noOcclusion().noDrops()));
	public static final RegistryObject<Block> antibuilder                = BLOCKS.register("antibuilder", () -> new AntibuilderBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> 10)));
	public static final RegistryObject<Block> antibuilt_block            = BLOCKS.register("antibuilt_block", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 2000.0F).sound(SoundType.METAL).noDrops().noOcclusion()));
	public static final RegistryObject<GhastTrapBlock> ghast_trap      = BLOCKS.register("ghast_trap", () -> new GhastTrapBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(GhastTrapBlock.ACTIVE) ? 15 : 0)));
	public static final RegistryObject<Block> carminite_reactor          = BLOCKS.register("carminite_reactor", () -> new CarminiteReactorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().harvestTool(ToolType.AXE).strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(CarminiteReactorBlock.ACTIVE) ? 15 : 0)));
	public static final RegistryObject<Block> reactor_debris             = BLOCKS.register("reactor_debris", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 2000.0F).sound(SoundType.METAL).noDrops().noOcclusion()));
	public static final RegistryObject<Block> fake_gold                  = BLOCKS.register("fake_gold", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(50.0F, 2000.0F).sound(SoundType.METAL).noDrops()));
	public static final RegistryObject<Block> fake_diamond               = BLOCKS.register("fake_diamond", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(50.0F, 2000.0F).sound(SoundType.METAL).noDrops()));
	public static final RegistryObject<TrophyBlock> naga_trophy           = BLOCKS.register("naga_trophy", () -> new TrophyBlock(BossVariant.NAGA, 5));
	public static final RegistryObject<TrophyBlock> lich_trophy           = BLOCKS.register("lich_trophy", () -> new TrophyBlock(BossVariant.LICH, 6));
	public static final RegistryObject<TrophyBlock> hydra_trophy          = BLOCKS.register("hydra_trophy", () -> new TrophyBlock(BossVariant.HYDRA, 12));
	public static final RegistryObject<TrophyBlock> ur_ghast_trophy       = BLOCKS.register("ur_ghast_trophy", () -> new TrophyBlock(BossVariant.UR_GHAST, 13));
	public static final RegistryObject<TrophyBlock> knight_phantom_trophy = BLOCKS.register("knight_phantom_trophy", () -> new TrophyBlock(BossVariant.KNIGHT_PHANTOM, 8));
	public static final RegistryObject<TrophyBlock> snow_queen_trophy     = BLOCKS.register("snow_queen_trophy", () -> new TrophyBlock(BossVariant.SNOW_QUEEN, 14));
	public static final RegistryObject<TrophyBlock> minoshroom_trophy     = BLOCKS.register("minoshroom_trophy", () -> new TrophyBlock(BossVariant.MINOSHROOM, 7));
	public static final RegistryObject<TrophyBlock> yeti_trophy           = BLOCKS.register("yeti_trophy", () -> new TrophyBlock(BossVariant.ALPHA_YETI, 9));
	public static final RegistryObject<TrophyBlock> quest_ram_trophy      = BLOCKS.register("quest_ram_trophy", () -> new TrophyBlock(BossVariant.QUEST_RAM, 1));
	public static final RegistryObject<TrophyWallBlock> naga_wall_trophy           = BLOCKS.register("naga_wall_trophy", () -> new TrophyWallBlock(BossVariant.NAGA));
	public static final RegistryObject<TrophyWallBlock> lich_wall_trophy           = BLOCKS.register("lich_wall_trophy", () -> new TrophyWallBlock(BossVariant.LICH));
	public static final RegistryObject<TrophyWallBlock> hydra_wall_trophy          = BLOCKS.register("hydra_wall_trophy", () -> new TrophyWallBlock(BossVariant.HYDRA));
	public static final RegistryObject<TrophyWallBlock> ur_ghast_wall_trophy       = BLOCKS.register("ur_ghast_wall_trophy", () -> new TrophyWallBlock(BossVariant.UR_GHAST));
	public static final RegistryObject<TrophyWallBlock> knight_phantom_wall_trophy = BLOCKS.register("knight_phantom_wall_trophy", () -> new TrophyWallBlock(BossVariant.KNIGHT_PHANTOM));
	public static final RegistryObject<TrophyWallBlock> snow_queen_wall_trophy     = BLOCKS.register("snow_queen_wall_trophy", () -> new TrophyWallBlock(BossVariant.SNOW_QUEEN));
	public static final RegistryObject<TrophyWallBlock> minoshroom_wall_trophy     = BLOCKS.register("minoshroom_wall_trophy", () -> new TrophyWallBlock(BossVariant.MINOSHROOM));
	public static final RegistryObject<TrophyWallBlock> yeti_wall_trophy           = BLOCKS.register("yeti_wall_trophy", () -> new TrophyWallBlock(BossVariant.ALPHA_YETI));
	public static final RegistryObject<TrophyWallBlock> quest_ram_wall_trophy      = BLOCKS.register("quest_ram_wall_trophy", () -> new TrophyWallBlock(BossVariant.QUEST_RAM));
	public static final RegistryObject<Block> stronghold_shield           = BLOCKS.register("stronghold_shield", () -> new StrongholdShieldBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(-1.0F, 6000000.0F).sound(SoundType.METAL).noDrops()));
	public static final RegistryObject<Block> trophy_pedestal             = BLOCKS.register("trophy_pedestal", () -> new TrophyPedestalBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(2.0F, 2000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> aurora_block                = BLOCKS.register("aurora_block", () -> new AuroraBrickBlock(BlockBehaviour.Properties.of(Material.ICE_SOLID).harvestTool(ToolType.PICKAXE).strength(10.0F, 10.0F)));
	public static final RegistryObject<RotatedPillarBlock> aurora_pillar  = BLOCKS.register("aurora_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.ICE_SOLID).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(2.0F, 10.0F)));
	public static final RegistryObject<Block> aurora_slab                 = BLOCKS.register("aurora_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.ICE_SOLID).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(2.0F, 10.0F)));
	public static final RegistryObject<Block> auroralized_glass           = BLOCKS.register("auroralized_glass", () -> new AuroralizedGlassBlock(BlockBehaviour.Properties.of(Material.ICE).noOcclusion()));
	public static final RegistryObject<Block> underbrick                  = BLOCKS.register("underbrick", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> underbrick_mossy            = BLOCKS.register("underbrick_mossy", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> underbrick_cracked          = BLOCKS.register("underbrick_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> underbrick_floor            = BLOCKS.register("underbrick_floor", () -> new UnfinishedBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE), true));
	public static final RegistryObject<Block> brown_thorns                = BLOCKS.register("brown_thorns", () -> new ThornsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(50.0F, 2000.0F).sound(SoundType.WOOD).noDrops()));
	public static final RegistryObject<Block> green_thorns                = BLOCKS.register("green_thorns", () -> new ThornsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PLANT).strength(50.0F, 2000.0F).sound(SoundType.WOOD).noDrops()));
	public static final RegistryObject<Block> burnt_thorns                = BLOCKS.register("burnt_thorns", () -> new BurntThornsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.STONE).strength(0.01F, 0.0F).sound(SoundType.SAND).noDrops()));
	public static final RegistryObject<Block> thorn_rose                  = BLOCKS.register("thorn_rose", () -> new ThornRoseBlock(BlockBehaviour.Properties.of(Material.PLANT).strength(10.0F, 0.0F).sound(SoundType.GRASS).noCollission()));
	public static final RegistryObject<Block> thorn_leaves                = BLOCKS.register("thorn_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).harvestTool(ToolType.HOE).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.GRASS)));
	public static final RegistryObject<Block> beanstalk_leaves            = BLOCKS.register("beanstalk_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).harvestTool(ToolType.HOE).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.GRASS)));
	public static final RegistryObject<Block> deadrock                    = BLOCKS.register("deadrock", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> deadrock_cracked            = BLOCKS.register("deadrock_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> deadrock_weathered          = BLOCKS.register("deadrock_weathered", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> trollsteinn                 = BLOCKS.register("trollsteinn", () -> new TrollsteinnBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> wispy_cloud                 = BLOCKS.register("wispy_cloud", () -> new HalfTransparentBlock(BlockBehaviour.Properties.of(Material.TOP_SNOW).strength(0.3F).sound(SoundType.WOOL).noOcclusion()));
	public static final RegistryObject<Block> fluffy_cloud                = BLOCKS.register("fluffy_cloud", () -> new Block(BlockBehaviour.Properties.of(Material.ICE_SOLID).strength(0.8F, 0.0F).sound(SoundType.WOOL)));
	public static final RegistryObject<Block> giant_cobblestone           = BLOCKS.register("giant_cobblestone", () -> new GiantBlock(BlockBehaviour.Properties.copy(Blocks.COBBLESTONE).requiresCorrectToolForDrops().strength(128, 10)));
	public static final RegistryObject<Block> giant_log                   = BLOCKS.register("giant_log", () -> new GiantLogBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(128, 0)));
	public static final RegistryObject<Block> giant_leaves                = BLOCKS.register("giant_leaves", () -> new GiantLeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(0.2F * 64F, 0.0F).noOcclusion()));
	public static final RegistryObject<Block> giant_obsidian              = BLOCKS.register("giant_obsidian", () -> new GiantBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN).requiresCorrectToolForDrops().strength(50.0F * 64F * 64F, 2000.0F * 64F * 64F)));
	public static final RegistryObject<Block> uberous_soil                = BLOCKS.register("uberous_soil", () -> new UberousSoilBlock(BlockBehaviour.Properties.of(Material.DIRT).harvestTool(ToolType.SHOVEL).strength(0.6F).sound(SoundType.GRAVEL)));
	public static final RegistryObject<Block> huge_stalk                  = BLOCKS.register("huge_stalk", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PLANT).strength(1.25F, 7.0F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> huge_mushgloom              = BLOCKS.register("huge_mushgloom", () -> new HugeMushroomBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(0.2F).sound(SoundType.WOOD).lightLevel((state) -> 5)));
	public static final RegistryObject<Block> huge_mushgloom_stem         = BLOCKS.register("huge_mushgloom_stem", () -> new HugeMushroomBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(0.2F).sound(SoundType.WOOD).lightLevel((state) -> 5)));
	public static final RegistryObject<Block> trollvidr                   = BLOCKS.register("trollvidr", () -> new TrollRootBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS).noCollission()));
	public static final RegistryObject<Block> unripe_trollber             = BLOCKS.register("unripe_trollber", () -> new UnripeTorchClusterBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<Block> trollber                    = BLOCKS.register("trollber", () -> new TrollRootBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS).noCollission().lightLevel((state) -> 15)));
	public static final RegistryObject<HugeLilyPadBlock> huge_lilypad   = BLOCKS.register("huge_lilypad", () -> new HugeLilyPadBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> huge_waterlily              = BLOCKS.register("huge_waterlily", () -> new HugeWaterLilyBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS)));
	public static final RegistryObject<RotatedPillarBlock> slider         = BLOCKS.register("slider", SliderBlock::new);
	public static final RegistryObject<Block> castle_brick                = BLOCKS.register("castle_brick", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_worn           = BLOCKS.register("castle_brick_worn", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_cracked        = BLOCKS.register("castle_brick_cracked", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_roof           = BLOCKS.register("castle_brick_roof", () -> new CastleBlock(MaterialColor.COLOR_GRAY));
	public static final RegistryObject<Block> castle_brick_mossy          = BLOCKS.register("castle_brick_mossy", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_frame          = BLOCKS.register("castle_brick_frame", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_pillar_encased       = BLOCKS.register("castle_pillar_encased", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_pillar_encased_tile  = BLOCKS.register("castle_pillar_encased_tile", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_pillar_bold          = BLOCKS.register("castle_pillar_bold", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_pillar_bold_tile     = BLOCKS.register("castle_pillar_bold_tile", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<StairBlock> castle_stairs_brick   = BLOCKS.register("castle_stairs_brick", () -> new StairBlock(castle_brick.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick.get())));
	public static final RegistryObject<StairBlock> castle_stairs_worn    = BLOCKS.register("castle_stairs_worn", () -> new StairBlock(castle_brick_worn.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick_worn.get())));
	public static final RegistryObject<StairBlock> castle_stairs_cracked = BLOCKS.register("castle_stairs_cracked", () -> new StairBlock(castle_brick_cracked.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick_cracked.get())));
	public static final RegistryObject<StairBlock> castle_stairs_mossy   = BLOCKS.register("castle_stairs_mossy", () -> new StairBlock(castle_brick_mossy.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick_mossy.get())));
	public static final RegistryObject<StairBlock> castle_stairs_encased = BLOCKS.register("castle_stairs_encased", () -> new StairBlock(castle_pillar_encased.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_pillar_encased.get())));
	public static final RegistryObject<StairBlock> castle_stairs_bold    = BLOCKS.register("castle_stairs_bold", () -> new StairBlock(castle_pillar_bold.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_pillar_bold.get())));
	public static final RegistryObject<Block> castle_rune_brick_pink      = BLOCKS.register("castle_rune_brick_pink", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_rune_brick_blue      = BLOCKS.register("castle_rune_brick_blue", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_rune_brick_yellow    = BLOCKS.register("castle_rune_brick_yellow", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_rune_brick_purple    = BLOCKS.register("castle_rune_brick_purple", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> force_field_purple          = BLOCKS.register("force_field_purple", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_pink            = BLOCKS.register("force_field_pink", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_orange          = BLOCKS.register("force_field_orange", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_green           = BLOCKS.register("force_field_green", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_blue            = BLOCKS.register("force_field_blue", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> cinder_furnace              = BLOCKS.register("cinder_furnace", CinderFurnaceBlock::new);
	public static final RegistryObject<RotatedPillarBlock> cinder_log     = BLOCKS.register("cinder_log", () -> new TFLogBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).harvestTool(ToolType.AXE).strength(1.0F)));
	public static final RegistryObject<Block> cinder_wood                 = BLOCKS.register("cinder_wood", () -> new UnfinishedBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).harvestTool(ToolType.AXE).strength(1.0F), true));
	public static final RegistryObject<Block> castle_door_yellow          = BLOCKS.register("castle_door_yellow", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> castle_door_purple          = BLOCKS.register("castle_door_purple", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> castle_door_pink            = BLOCKS.register("castle_door_pink", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> castle_door_blue            = BLOCKS.register("castle_door_blue", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> experiment_115              = BLOCKS.register("experiment_115", Experiment115Block::new);
	public static final RegistryObject<Block> twilight_portal_miniature_structure    = BLOCKS.register("twilight_portal_miniature_structure", MiniatureStructureBlock::new);
//	public static final RegistryObject<Block> hedge_maze_miniature_structure         = BLOCKS.register("hedge_maze_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> hollow_hill_miniature_structure        = BLOCKS.register("hollow_hill_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> quest_grove_miniature_structure        = BLOCKS.register("quest_grove_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> mushroom_tower_miniature_structure     = BLOCKS.register("mushroom_tower_miniature_structure", () -> new BlockTFMiniatureStructure());
	public static final RegistryObject<Block> naga_courtyard_miniature_structure     = BLOCKS.register("naga_courtyard_miniature_structure", MiniatureStructureBlock::new);
	public static final RegistryObject<Block> lich_tower_miniature_structure         = BLOCKS.register("lich_tower_miniature_structure", MiniatureStructureBlock::new);
//	public static final RegistryObject<Block> minotaur_labyrinth_miniature_structure = BLOCKS.register("minotaur_labyrinth_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> hydra_lair_miniature_structure         = BLOCKS.register("hydra_lair_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> goblin_stronghold_miniature_structure  = BLOCKS.register("goblin_stronghold_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> dark_tower_miniature_structure         = BLOCKS.register("dark_tower_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> yeti_cave_miniature_structure          = BLOCKS.register("yeti_cave_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> aurora_palace_miniature_structure      = BLOCKS.register("aurora_palace_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> troll_cave_cottage_miniature_structure = BLOCKS.register("troll_cave_cottage_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> final_castle_miniature_structure       = BLOCKS.register("final_castle_miniature_structure", () -> new BlockTFMiniatureStructure());
	public static final RegistryObject<Block> knightmetal_block                      = BLOCKS.register("knightmetal_block", () -> new KnightmetalBlock(BlockBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(5.0F, 41.0F).sound(SoundType.METAL)));
	public static final RegistryObject<Block> ironwood_block                         = BLOCKS.register("ironwood_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).strength(5.0F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> fiery_block                            = BLOCKS.register("fiery_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.TERRACOTTA_BLACK).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(5.0F, 10.0F).sound(SoundType.METAL).noOcclusion().emissiveRendering((state, world, pos) -> true)));
	public static final RegistryObject<Block> steeleaf_block                         = BLOCKS.register("steeleaf_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.LEAVES, MaterialColor.PLANT).harvestTool(ToolType.HOE).strength(5.0F, 10.0F).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> arctic_fur_block                       = BLOCKS.register("arctic_fur_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.WOOL, MaterialColor.WOOL).harvestTool(ToolType.HOE).strength(0.8F, 10.0F).sound(SoundType.WOOL)));
	public static final RegistryObject<Block> carminite_block                        = BLOCKS.register("carminite_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.CLAY, MaterialColor.COLOR_RED).strength(0.0F, 10.0F).sound(SoundType.SLIME_BLOCK)));
	public static final RegistryObject<Block> spiral_bricks                          = BLOCKS.register("spiral_bricks", SpiralBrickBlock::new);
	public static final RegistryObject<Block> etched_nagastone                       = BLOCKS.register("etched_nagastone", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> nagastone_pillar                       = BLOCKS.register("nagastone_pillar", NagastonePillarBlock::new);
	public static final RegistryObject<StairBlock> nagastone_stairs_left            = BLOCKS.register("nagastone_stairs_left", () -> new StairBlock(etched_nagastone.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone.get())));
	public static final RegistryObject<StairBlock> nagastone_stairs_right           = BLOCKS.register("nagastone_stairs_right", () -> new StairBlock(etched_nagastone.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone.get())));
	public static final RegistryObject<Block> etched_nagastone_mossy                 = BLOCKS.register("etched_nagastone_mossy", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> nagastone_pillar_mossy                 = BLOCKS.register("nagastone_pillar_mossy", NagastonePillarBlock::new);
	public static final RegistryObject<StairBlock> nagastone_stairs_mossy_left      = BLOCKS.register("nagastone_stairs_mossy_left", () -> new StairBlock(etched_nagastone_mossy.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_mossy.get())));
	public static final RegistryObject<StairBlock> nagastone_stairs_mossy_right     = BLOCKS.register("nagastone_stairs_mossy_right", () -> new StairBlock(etched_nagastone_mossy.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_mossy.get())));
	public static final RegistryObject<Block> etched_nagastone_weathered             = BLOCKS.register("etched_nagastone_weathered", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> nagastone_pillar_weathered             = BLOCKS.register("nagastone_pillar_weathered", NagastonePillarBlock::new);
	public static final RegistryObject<StairBlock> nagastone_stairs_weathered_left  = BLOCKS.register("nagastone_stairs_weathered_left", () -> new StairBlock(etched_nagastone_weathered.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_weathered.get())));
	public static final RegistryObject<StairBlock> nagastone_stairs_weathered_right = BLOCKS.register("nagastone_stairs_weathered_right", () -> new StairBlock(etched_nagastone_weathered.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_weathered.get())));
	public static final RegistryObject<Block> iron_ladder                = BLOCKS.register("iron_ladder", () -> new IronLadderBlock(BlockBehaviour.Properties.of(Material.DECORATION).requiresCorrectToolForDrops().harvestTool(ToolType.PICKAXE).strength(5.0F, 10.0F).sound(SoundType.METAL).noOcclusion()));
	//public static final RegistryObject<Block> terrorcotta_circle         = BLOCKS.register("terrorcotta_circle", () -> new BlockTFHorizontal(Block.Properties.create(Material.ROCK, MaterialColor.SAND).setRequiresTool().hardnessAndResistance(1.7F).sound(SoundType.STONE)));
	//public static final RegistryObject<Block> terrorcotta_diagonal       = BLOCKS.register("terrorcotta_diagonal", () -> new BlockTFDiagonal(Block.Properties.create(Material.ROCK, MaterialColor.SAND).setRequiresTool().hardnessAndResistance(1.7F).sound(SoundType.STONE)));
	public static final RegistryObject<RotatedPillarBlock> stone_twist   = BLOCKS.register("stone_twist", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F)));
	public static final RegistryObject<Block> stone_twist_thin           = BLOCKS.register("stone_twist_thin", () -> new WallPillarBlock(Material.STONE, 12, 16));
	//public static final RegistryObject<Block> lapis_block                = BLOCKS.register("lapis_block", () -> new Block(Block.Properties.create(Material.IRON).setRequiresTool().hardnessAndResistance(3.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<KeepsakeCasketBlock> keepsake_casket = BLOCKS.register("keepsake_casket", KeepsakeCasketBlock::new);

	//Pot all the things!
	public static final RegistryObject<FlowerPotBlock> potted_twilight_oak_sapling = BLOCKS.register("potted_twilight_oak_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, oak_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_canopy_sapling = BLOCKS.register("potted_canopy_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, canopy_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_mangrove_sapling = BLOCKS.register("potted_mangrove_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, mangrove_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_darkwood_sapling = BLOCKS.register("potted_darkwood_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, darkwood_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_hollow_oak_sapling = BLOCKS.register("potted_hollow_oak_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, hollow_oak_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_rainboak_sapling = BLOCKS.register("potted_rainboak_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, rainboak_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_time_sapling = BLOCKS.register("potted_time_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, time_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_trans_sapling = BLOCKS.register("potted_trans_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, transformation_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_mine_sapling = BLOCKS.register("potted_mine_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, mining_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_sort_sapling = BLOCKS.register("potted_sort_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, sorting_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_mayapple = BLOCKS.register("potted_mayapple", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, mayapple, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_fiddlehead = BLOCKS.register("potted_fiddlehead", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, fiddlehead, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_mushgloom = BLOCKS.register("potted_mushgloom", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, mushgloom, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_thorn = BLOCKS.register("potted_thorn", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, brown_thorns, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_green_thorn = BLOCKS.register("potted_green_thorn", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, green_thorns, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final RegistryObject<FlowerPotBlock> potted_dead_thorn = BLOCKS.register("potted_dead_thorn", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, burnt_thorns, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));

	public static final WoodType TWILIGHT_OAK = WoodType.create(TwilightForestMod.prefix("twilight_oak").toString());
	public static final WoodType CANOPY = WoodType.create(TwilightForestMod.prefix("canopy").toString());
	public static final WoodType MANGROVE = WoodType.create(TwilightForestMod.prefix("mangrove").toString());
	public static final WoodType DARKWOOD = WoodType.create(TwilightForestMod.prefix("darkwood").toString());
	public static final WoodType TIMEWOOD = WoodType.create(TwilightForestMod.prefix("timewood").toString());
	public static final WoodType TRANSFORMATION = WoodType.create(TwilightForestMod.prefix("transformation").toString());
	public static final WoodType MINING = WoodType.create(TwilightForestMod.prefix("mining").toString());
	public static final WoodType SORTING = WoodType.create(TwilightForestMod.prefix("sorting").toString());

	// TODO chests? boats?
	public static final RegistryObject<Block> twilight_oak_planks           = BLOCKS.register("twilight_oak_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> twilight_oak_stairs     = BLOCKS.register("twilight_oak_stairs", () -> new StairBlock(twilight_oak_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(twilight_oak_planks.get())));
	public static final RegistryObject<Block> twilight_oak_slab             = BLOCKS.register("twilight_oak_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get())));
	public static final RegistryObject<Block> twilight_oak_button           = BLOCKS.register("twilight_oak_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> twilight_oak_fence            = BLOCKS.register("twilight_oak_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get())));
	public static final RegistryObject<Block> twilight_oak_gate             = BLOCKS.register("twilight_oak_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get())));
	public static final RegistryObject<Block> twilight_oak_plate            = BLOCKS.register("twilight_oak_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(twilight_oak_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> twilight_oak_door         = BLOCKS.register("twilight_oak_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> twilight_oak_trapdoor = BLOCKS.register("twilight_oak_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> twilight_oak_sign = BLOCKS.register("twilight_oak_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TWILIGHT_OAK));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> twilight_wall_sign    = BLOCKS.register("twilight_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(twilight_oak_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TWILIGHT_OAK));
	public static final RegistryObject<Block> canopy_planks                 = BLOCKS.register("canopy_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> canopy_stairs           = BLOCKS.register("canopy_stairs", () -> new StairBlock(canopy_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(canopy_planks.get())));
	public static final RegistryObject<Block> canopy_slab                   = BLOCKS.register("canopy_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(canopy_planks.get())));
	public static final RegistryObject<Block> canopy_button                 = BLOCKS.register("canopy_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(canopy_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> canopy_fence                  = BLOCKS.register("canopy_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(canopy_planks.get())));
	public static final RegistryObject<Block> canopy_gate                   = BLOCKS.register("canopy_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(canopy_planks.get())));
	public static final RegistryObject<Block> canopy_plate                  = BLOCKS.register("canopy_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(canopy_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> canopy_door               = BLOCKS.register("canopy_door", () -> new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> canopy_trapdoor       = BLOCKS.register("canopy_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> canopy_sign       = BLOCKS.register("canopy_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(canopy_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), CANOPY));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> canopy_wall_sign      = BLOCKS.register("canopy_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(canopy_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), CANOPY));
	public static final RegistryObject<Block> mangrove_planks               = BLOCKS.register("mangrove_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> mangrove_stairs         = BLOCKS.register("mangrove_stairs", () -> new StairBlock(mangrove_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(mangrove_planks.get())));
	public static final RegistryObject<Block> mangrove_slab                 = BLOCKS.register("mangrove_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(mangrove_planks.get()).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> mangrove_button               = BLOCKS.register("mangrove_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(mangrove_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> mangrove_fence                = BLOCKS.register("mangrove_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(mangrove_planks.get())));
	public static final RegistryObject<Block> mangrove_gate                 = BLOCKS.register("mangrove_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(mangrove_planks.get())));
	public static final RegistryObject<Block> mangrove_plate                = BLOCKS.register("mangrove_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(mangrove_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> mangrove_door             = BLOCKS.register("mangrove_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(mangrove_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> mangrove_trapdoor     = BLOCKS.register("mangrove_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(mangrove_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> mangrove_sign     = BLOCKS.register("mangrove_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(mangrove_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MANGROVE));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> mangrove_wall_sign    = BLOCKS.register("mangrove_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(mangrove_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MANGROVE));
	public static final RegistryObject<Block> dark_planks                   = BLOCKS.register("dark_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> dark_stairs             = BLOCKS.register("dark_stairs", () -> new StairBlock(dark_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(dark_planks.get())));
	public static final RegistryObject<Block> dark_slab                     = BLOCKS.register("dark_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(dark_planks.get()).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_button                   = BLOCKS.register("dark_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(dark_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> dark_fence                    = BLOCKS.register("dark_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(dark_planks.get())));
	public static final RegistryObject<Block> dark_gate                     = BLOCKS.register("dark_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(dark_planks.get())));
	public static final RegistryObject<Block> dark_plate                    = BLOCKS.register("dark_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(dark_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> dark_door                 = BLOCKS.register("dark_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(dark_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> dark_trapdoor         = BLOCKS.register("dark_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(dark_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> darkwood_sign     = BLOCKS.register("darkwood_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(dark_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), DARKWOOD));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> darkwood_wall_sign    = BLOCKS.register("darkwood_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(dark_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), DARKWOOD));
	public static final RegistryObject<Block> time_planks                   = BLOCKS.register("time_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> time_stairs             = BLOCKS.register("time_stairs", () -> new StairBlock(time_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(time_planks.get())));
	public static final RegistryObject<Block> time_slab                     = BLOCKS.register("time_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(time_planks.get()).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> time_button                   = BLOCKS.register("time_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(time_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> time_fence                    = BLOCKS.register("time_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(time_planks.get())));
	public static final RegistryObject<Block> time_gate                     = BLOCKS.register("time_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(time_planks.get())));
	public static final RegistryObject<Block> time_plate                    = BLOCKS.register("time_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(time_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> time_door                 = BLOCKS.register("time_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(time_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> time_trapdoor         = BLOCKS.register("time_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(time_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> time_sign         = BLOCKS.register("time_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(time_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TIMEWOOD));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> time_wall_sign        = BLOCKS.register("time_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(time_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TIMEWOOD));
	public static final RegistryObject<Block> trans_planks                  = BLOCKS.register("trans_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> trans_stairs            = BLOCKS.register("trans_stairs", () -> new StairBlock(trans_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(trans_planks.get())));
	public static final RegistryObject<Block> trans_slab                    = BLOCKS.register("trans_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(trans_planks.get()).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> trans_button                  = BLOCKS.register("trans_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(trans_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> trans_fence                   = BLOCKS.register("trans_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(trans_planks.get())));
	public static final RegistryObject<Block> trans_gate                    = BLOCKS.register("trans_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(trans_planks.get())));
	public static final RegistryObject<Block> trans_plate                   = BLOCKS.register("trans_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(trans_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> trans_door                = BLOCKS.register("trans_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(trans_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> trans_trapdoor        = BLOCKS.register("trans_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(trans_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> trans_sign        = BLOCKS.register("trans_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(trans_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TRANSFORMATION));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> trans_wall_sign       = BLOCKS.register("trans_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(trans_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TRANSFORMATION));
	public static final RegistryObject<Block> mine_planks                   = BLOCKS.register("mine_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> mine_stairs             = BLOCKS.register("mine_stairs", () -> new StairBlock(mine_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(mine_planks.get())));
	public static final RegistryObject<Block> mine_slab                     = BLOCKS.register("mine_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(mine_planks.get()).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> mine_button                   = BLOCKS.register("mine_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(mine_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> mine_fence                    = BLOCKS.register("mine_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(mine_planks.get())));
	public static final RegistryObject<Block> mine_gate                     = BLOCKS.register("mine_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(mine_planks.get())));
	public static final RegistryObject<Block> mine_plate                    = BLOCKS.register("mine_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(mine_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> mine_door                 = BLOCKS.register("mine_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(mine_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> mine_trapdoor         = BLOCKS.register("mine_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(mine_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> mine_sign         = BLOCKS.register("mine_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(mine_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MINING));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> mine_wall_sign        = BLOCKS.register("mine_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(mine_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MINING));
	public static final RegistryObject<Block> sort_planks                   = BLOCKS.register("sort_planks", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<StairBlock> sort_stairs             = BLOCKS.register("sort_stairs", () -> new StairBlock(sort_planks.get().defaultBlockState(), BlockBehaviour.Properties.copy(sort_planks.get())));
	public static final RegistryObject<Block> sort_slab                     = BLOCKS.register("sort_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(sort_planks.get()).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> sort_button                   = BLOCKS.register("sort_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.copy(sort_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> sort_fence                    = BLOCKS.register("sort_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(sort_planks.get())));
	public static final RegistryObject<Block> sort_gate                     = BLOCKS.register("sort_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(sort_planks.get())));
	public static final RegistryObject<Block> sort_plate                    = BLOCKS.register("sort_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(sort_planks.get()).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<DoorBlock> sort_door                 = BLOCKS.register("sort_door", () -> new DoorBlock(BlockBehaviour.Properties.copy(sort_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<TrapDoorBlock> sort_trapdoor         = BLOCKS.register("sort_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(sort_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final RegistryObject<StandingSignBlock> sort_sign         = BLOCKS.register("sort_sign", () -> new TFSignBlock(BlockBehaviour.Properties.copy(sort_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), SORTING));
	public static final RegistryObject<net.minecraft.world.level.block.WallSignBlock> sort_wall_sign        = BLOCKS.register("sort_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.copy(sort_planks.get()).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), SORTING));

	@SubscribeEvent
	public static void registerItemblocks(RegistryEvent.Register<Item> evt) {
		TFBlockItems.registerBlockItems(evt);
		TFCompat.initCompatItems(evt);
	}

	private static BlockBehaviour.Properties logProperties(MaterialColor color) {
		return logProperties(color, color);
	}

	private static BlockBehaviour.Properties logProperties(MaterialColor top, MaterialColor side) {
		return BlockBehaviour.Properties.of(Material.WOOD, (state) ->
				state.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? top : side);
	}

	public static void tfCompostables() {
		ComposterBlock.add(0.1F, fallen_leaves.get());
		ComposterBlock.add(0.3F, canopy_leaves.get());
		ComposterBlock.add(0.3F, clover_patch.get());
		ComposterBlock.add(0.3F, dark_leaves.get());
		ComposterBlock.add(0.3F, fiddlehead.get());
		ComposterBlock.add(0.3F, hedge.get());
		ComposterBlock.add(0.3F, mangrove_leaves.get());
		ComposterBlock.add(0.3F, mayapple.get());
		ComposterBlock.add(0.3F, mining_leaves.get());
		ComposterBlock.add(0.3F, oak_leaves.get());
		ComposterBlock.add(0.3F, rainboak_leaves.get());
		ComposterBlock.add(0.3F, root_strand.get());
		ComposterBlock.add(0.3F, sorting_leaves.get());
		ComposterBlock.add(0.3F, thorn_leaves.get());
		ComposterBlock.add(0.3F, time_leaves.get());
		ComposterBlock.add(0.3F, transformation_leaves.get());
		ComposterBlock.add(0.3F, oak_sapling.get());
		ComposterBlock.add(0.3F, canopy_sapling.get());
		ComposterBlock.add(0.3F, mangrove_sapling.get());
		ComposterBlock.add(0.3F, darkwood_sapling.get());
		ComposterBlock.add(0.3F, rainboak_sapling.get());
		ComposterBlock.add(0.5F, beanstalk_leaves.get());
		ComposterBlock.add(0.5F, moss_patch.get());
		ComposterBlock.add(0.5F, root.get());
		ComposterBlock.add(0.5F, thorn_rose.get());
		ComposterBlock.add(0.5F, trollvidr.get());
		ComposterBlock.add(0.5F, hollow_oak_sapling.get());
		ComposterBlock.add(0.5F, time_sapling.get());
		ComposterBlock.add(0.5F, transformation_sapling.get());
		ComposterBlock.add(0.5F, mining_sapling.get());
		ComposterBlock.add(0.5F, sorting_sapling.get());
		ComposterBlock.add(0.65F, huge_mushgloom_stem.get());
		ComposterBlock.add(0.65F, huge_waterlily.get());
		ComposterBlock.add(0.65F, liveroot_block.get());
		ComposterBlock.add(0.65F, mushgloom.get());
		ComposterBlock.add(0.65F, uberous_soil.get());
		ComposterBlock.add(0.65F, huge_stalk.get());
		ComposterBlock.add(0.65F, unripe_trollber.get());
		ComposterBlock.add(0.65F, trollber.get());
		ComposterBlock.add(0.85F, huge_lilypad.get());
		ComposterBlock.add(0.85F, huge_mushgloom.get());

		//eh, we'll do items here too
		ComposterBlock.add(0.3F, TFItems.torchberries.get());
		ComposterBlock.add(0.5F, TFItems.liveroot.get());
		ComposterBlock.add(0.65F, TFItems.maze_wafer.get());
		ComposterBlock.add(0.85F, TFItems.experiment_115.get());
		ComposterBlock.add(0.85F, TFItems.magic_beans.get());
	}

	public static void TFBurnables() {
		FireBlock fireblock = (FireBlock)Blocks.FIRE;
		fireblock.setFlammable(root.get(), 5, 20);
		fireblock.setFlammable(liveroot_block.get(), 5, 20);
		fireblock.setFlammable(oak_wood.get(), 5, 5);
		fireblock.setFlammable(twilight_oak_planks.get(), 5, 20);
		fireblock.setFlammable(twilight_oak_slab.get(), 5, 20);
		fireblock.setFlammable(twilight_oak_stairs.get(), 5, 20);
		fireblock.setFlammable(twilight_oak_fence.get(), 5, 20);
		fireblock.setFlammable(twilight_oak_gate.get(), 5, 20);
		fireblock.setFlammable(canopy_wood.get(), 5, 5);
		fireblock.setFlammable(canopy_planks.get(), 5, 20);
		fireblock.setFlammable(canopy_slab.get(), 5, 20);
		fireblock.setFlammable(canopy_stairs.get(), 5, 20);
		fireblock.setFlammable(canopy_fence.get(), 5, 20);
		fireblock.setFlammable(canopy_gate.get(), 5, 20);
		fireblock.setFlammable(mangrove_wood.get(), 5, 5);
		fireblock.setFlammable(mangrove_planks.get(), 5, 20);
		fireblock.setFlammable(mangrove_slab.get(), 5, 20);
		fireblock.setFlammable(mangrove_stairs.get(), 5, 20);
		fireblock.setFlammable(mangrove_fence.get(), 5, 20);
		fireblock.setFlammable(mangrove_gate.get(), 5, 20);
		fireblock.setFlammable(dark_wood.get(), 5, 5);
		fireblock.setFlammable(dark_planks.get(), 5, 20);
		fireblock.setFlammable(dark_slab.get(), 5, 20);
		fireblock.setFlammable(dark_stairs.get(), 5, 20);
		fireblock.setFlammable(dark_fence.get(), 5, 20);
		fireblock.setFlammable(dark_gate.get(), 5, 20);
		fireblock.setFlammable(time_wood.get(), 5, 5);
		fireblock.setFlammable(time_planks.get(), 5, 20);
		fireblock.setFlammable(time_slab.get(), 5, 20);
		fireblock.setFlammable(time_stairs.get(), 5, 20);
		fireblock.setFlammable(time_fence.get(), 5, 20);
		fireblock.setFlammable(time_gate.get(), 5, 20);
		fireblock.setFlammable(transformation_wood.get(), 5, 5);
		fireblock.setFlammable(trans_planks.get(), 5, 20);
		fireblock.setFlammable(trans_slab.get(), 5, 20);
		fireblock.setFlammable(trans_stairs.get(), 5, 20);
		fireblock.setFlammable(trans_fence.get(), 5, 20);
		fireblock.setFlammable(trans_gate.get(), 5, 20);
		fireblock.setFlammable(mining_wood.get(), 5, 5);
		fireblock.setFlammable(mine_planks.get(), 5, 20);
		fireblock.setFlammable(mine_slab.get(), 5, 20);
		fireblock.setFlammable(mine_stairs.get(), 5, 20);
		fireblock.setFlammable(mine_fence.get(), 5, 20);
		fireblock.setFlammable(mine_gate.get(), 5, 20);
		fireblock.setFlammable(sorting_wood.get(), 5, 5);
		fireblock.setFlammable(sort_planks.get(), 5, 20);
		fireblock.setFlammable(sort_slab.get(), 5, 20);
		fireblock.setFlammable(sort_stairs.get(), 5, 20);
		fireblock.setFlammable(sort_fence.get(), 5, 20);
		fireblock.setFlammable(sort_gate.get(), 5, 20);
	}

	public static void TFPots() {
		FlowerPotBlock pot = (FlowerPotBlock) Blocks.FLOWER_POT;

		pot.addPlant(oak_sapling.getId(), potted_twilight_oak_sapling);
		pot.addPlant(canopy_sapling.getId(), potted_canopy_sapling);
		pot.addPlant(mangrove_sapling.getId(), potted_mangrove_sapling);
		pot.addPlant(darkwood_sapling.getId(), potted_darkwood_sapling);
		pot.addPlant(hollow_oak_sapling.getId(), potted_hollow_oak_sapling);
		pot.addPlant(rainboak_sapling.getId(), potted_rainboak_sapling);
		pot.addPlant(time_sapling.getId(), potted_time_sapling);
		pot.addPlant(transformation_sapling.getId(), potted_trans_sapling);
		pot.addPlant(mining_sapling.getId(), potted_mine_sapling);
		pot.addPlant(sorting_sapling.getId(), potted_sort_sapling);
		pot.addPlant(mayapple.getId(), potted_mayapple);
		pot.addPlant(fiddlehead.getId(), potted_fiddlehead);
		pot.addPlant(mushgloom.getId(), potted_mushgloom);
		pot.addPlant(brown_thorns.getId(), potted_thorn);
		pot.addPlant(green_thorns.getId(), potted_green_thorn);
		pot.addPlant(burnt_thorns.getId(), potted_dead_thorn);
	}
}
