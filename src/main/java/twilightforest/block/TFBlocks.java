package twilightforest.block;

import net.minecraft.core.Registry;
import net.minecraft.world.level.ItemLike;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraft.core.Direction;

import net.fabricmc.fabric.api.registry.CompostingChanceRegistry;
import net.fabricmc.fabric.api.registry.FlammableBlockRegistry;
import twilightforest.TFConstants;
import twilightforest.compat.TFCompat;
import twilightforest.enums.*;
import twilightforest.item.TFItems;
import twilightforest.world.components.feature.trees.growers.*;

import javax.annotation.Nonnull;

import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.WoodType;

@SuppressWarnings({"WeakerAccess", "unused"})
@Nonnull
public class TFBlocks {
	//public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, TwilightForestMod.ID);

	public static final RotatedPillarBlock oak_log                = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_log", new TFLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock canopy_log             = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_log", new TFLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock mangrove_log           = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_log", new TFLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock dark_log               = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_log", new TFLogBlock(logProperties(MaterialColor.COLOR_BROWN, MaterialColor.STONE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_oak_log       = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_twilight_oak_log", new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_canopy_log    = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_canopy_log", new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_mangrove_log  = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_mangrove_log", new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_dark_log      = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_dark_log", new TFLogBlock(logProperties(MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock oak_wood               = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_wood", new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock canopy_wood            = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_wood", new TFLogBlock(logProperties(MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock mangrove_wood          = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_wood", new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock dark_wood              = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_wood", new TFLogBlock(logProperties(MaterialColor.STONE).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_oak_wood      = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_twilight_oak_wood", new TFLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_canopy_wood   = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_canopy_wood", new TFLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_mangrove_wood = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_mangrove_wood", new TFLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_dark_wood     = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_dark_wood", new TFLogBlock(logProperties(MaterialColor.COLOR_ORANGE, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
	public static final Block oak_leaves                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_leaves", new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.AZALEA_LEAVES)));
	public static final Block canopy_leaves              = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_leaves", new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.AZALEA_LEAVES)));
	public static final Block mangrove_leaves            = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_leaves", new MangroveLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.AZALEA_LEAVES)));
	public static final Block dark_leaves                = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_leaves", new DarkLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(2.0F, 10.0F).sound(SoundType.AZALEA_LEAVES)));
	public static final Block hardened_dark_leaves       = Registry.register(Registry.BLOCK, TFConstants.ID + ":hardened_dark_leaves", new HardenedDarkLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(2.0F, 10.0F).sound(SoundType.AZALEA_LEAVES)));
	public static final Block rainboak_leaves            = Registry.register(Registry.BLOCK, TFConstants.ID + ":rainboak_leaves", new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.AZALEA_LEAVES)));
	public static final TFPortalBlock twilight_portal    = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_portal", new TFPortalBlock(BlockBehaviour.Properties.of(Material.PORTAL).strength(-1.0F).sound(SoundType.GLASS).lightLevel((state) -> 11).noCollission().noOcclusion().noDrops()));
	public static final Block maze_stone                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_brick           = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_brick", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_chiseled        = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_chiseled", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_decorative      = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_decorative", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_cracked         = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_cracked", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_mossy           = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_mossy", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_mosaic          = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_mosaic", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block maze_stone_border          = Registry.register(Registry.BLOCK, TFConstants.ID + ":maze_stone_border", new MazestoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 5.0F).sound(SoundType.STONE)));
	public static final Block hedge                      = Registry.register(Registry.BLOCK, TFConstants.ID + ":hedge", new HedgeBlock(BlockBehaviour.Properties.of(Material.CACTUS).strength(2.0F, 10.0F).sound(SoundType.GRASS)));
	public static final Block boss_spawner_naga          = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_naga", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.NAGA));
	public static final Block boss_spawner_lich          = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_lich", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.LICH));
	public static final Block boss_spawner_hydra         = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_hydra", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.HYDRA));
	public static final Block boss_spawner_ur_ghast      = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_ur_ghast", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.UR_GHAST));
	public static final Block boss_spawner_knight_phantom = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_knight_phantom", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.KNIGHT_PHANTOM));
	public static final Block boss_spawner_snow_queen    = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_snow_queen", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.SNOW_QUEEN));
	public static final Block boss_spawner_minoshroom    = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_minoshroom", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.MINOSHROOM));
	public static final Block boss_spawner_alpha_yeti    = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_alpha_yeti", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.ALPHA_YETI));
	public static final Block boss_spawner_final_boss    = Registry.register(Registry.BLOCK, TFConstants.ID + ":boss_spawner_final_boss", new BossSpawnerBlock(BlockBehaviour.Properties.of(Material.STONE).strength(-1.0F).noOcclusion().noDrops(), BossVariant.FINAL_BOSS));
	public static final Block firefly_jar                = Registry.register(Registry.BLOCK, TFConstants.ID + ":firefly_jar", new JarBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 0.0F).sound(SoundType.WOOD).lightLevel((state) -> 15).noOcclusion()));
	public static final Block firefly_spawner            = Registry.register(Registry.BLOCK, TFConstants.ID + ":firefly_particle_spawner", new FireflySpawnerBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(1.0F, 0.0F).sound(SoundType.GLASS).lightLevel((state) -> 15).noOcclusion()));
	public static final Block cicada_jar                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":cicada_jar", new JarBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 0.0F).sound(SoundType.WOOD).noOcclusion().randomTicks()));
	public static final Block moss_patch                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":moss_patch", new TFPlantBlock(PlantVariant.MOSSPATCH, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.MOSS).noCollission().noOcclusion()));
	public static final Block mayapple                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":mayapple", new TFPlantBlock(PlantVariant.MAYAPPLE, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final Block clover_patch               = Registry.register(Registry.BLOCK, TFConstants.ID + ":clover_patch", new TFPlantBlock(PlantVariant.CLOVERPATCH, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final Block fiddlehead                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":fiddlehead", new TFPlantBlock(PlantVariant.FIDDLEHEAD, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().noOcclusion()));
	public static final Block mushgloom                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":mushgloom", new TFPlantBlock(PlantVariant.MUSHGLOOM, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.FUNGUS).noCollission().noOcclusion().lightLevel((state) -> 3)));
	public static final Block torchberry_plant           = Registry.register(Registry.BLOCK, TFConstants.ID + ":torchberry_plant", new TorchberryPlantBlock(PlantVariant.TORCHBERRY, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.HANGING_ROOTS).noCollission().noOcclusion().lightLevel((state) -> (state.getValue(TorchberryPlantBlock.HAS_BERRIES) ? 8 : 0))));
	public static final Block root_strand                = Registry.register(Registry.BLOCK, TFConstants.ID + ":root_strand", new TFPlantBlock(PlantVariant.ROOT_STRAND, BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.HANGING_ROOTS).noCollission().noOcclusion()));
	public static final Block fallen_leaves              = Registry.register(Registry.BLOCK, TFConstants.ID + ":fallen_leaves", new TFPlantBlock(PlantVariant.FALLEN_LEAVES, BlockBehaviour.Properties.of(Material.REPLACEABLE_PLANT).strength(0.0F).sound(SoundType.AZALEA_LEAVES).noCollission().noOcclusion()));
	public static final Block root                       = Registry.register(Registry.BLOCK, TFConstants.ID + ":root", new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final Block liveroot_block             = Registry.register(Registry.BLOCK, TFConstants.ID + ":liveroot_block", new LiverootBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final Block uncrafting_table           = Registry.register(Registry.BLOCK, TFConstants.ID + ":uncrafting_table", new UncraftingTableBlock());
	public static final Block smoker                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":smoker", new TFSmokerBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.GRASS).strength(1.5F, 0.0F).sound(SoundType.WOOD)));
	public static final Block encased_smoker             = Registry.register(Registry.BLOCK, TFConstants.ID + ":encased_smoker", new EncasedSmokerBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(1.5F, 0.0F).sound(SoundType.WOOD)));
	public static final Block fire_jet                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":fire_jet", new FireJetBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.GRASS).strength(1.5F, 0.0F).sound(SoundType.WOOD).randomTicks().lightLevel((state) -> state.getValue(FireJetBlock.STATE) != FireJetVariant.FLAME ? 0 : 15)));
	public static final Block encased_fire_jet           = Registry.register(Registry.BLOCK, TFConstants.ID + ":encased_fire_jet", new EncasedFireJetBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(1.5F, 0.0F).sound(SoundType.WOOD).lightLevel((state) -> 15)));
	public static final Block naga_stone_head            = Registry.register(Registry.BLOCK, TFConstants.ID + ":naga_stone_head", new TFHorizontalBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final Block naga_stone                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":naga_stone", new NagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final SaplingBlock oak_sapling            = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_sapling", new SaplingBlock(new SmallOakTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock canopy_sapling         = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_sapling", new SaplingBlock(new CanopyTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock mangrove_sapling       = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_sapling", new MangroveSaplingBlock(new MangroveTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock darkwood_sapling       = Registry.register(Registry.BLOCK, TFConstants.ID + ":darkwood_sapling", new SaplingBlock(new DarkCanopyTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock hollow_oak_sapling     = Registry.register(Registry.BLOCK, TFConstants.ID + ":hollow_oak_sapling", new SaplingBlock(new HollowTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock time_sapling           = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_sapling", new SaplingBlock(new TimeTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock transformation_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":transformation_sapling", new SaplingBlock(new TransformationTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock mining_sapling         = Registry.register(Registry.BLOCK, TFConstants.ID + ":mining_sapling", new SaplingBlock(new MinersTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock sorting_sapling        = Registry.register(Registry.BLOCK, TFConstants.ID + ":sorting_sapling", new SaplingBlock(new SortingTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final SaplingBlock rainboak_sapling       = Registry.register(Registry.BLOCK, TFConstants.ID + ":rainboak_sapling", new SaplingBlock(new RainboakTree(), BlockBehaviour.Properties.of(Material.PLANT).strength(0.0F).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RotatedPillarBlock time_log                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_log", new TFLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock transformation_log           = Registry.register(Registry.BLOCK, TFConstants.ID + ":transformation_log", new TFLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock mining_log                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":mining_log", new TFLogBlock(logProperties(MaterialColor.SAND, MaterialColor.QUARTZ).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock sorting_log                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":sorting_log", new TFLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_time_log            = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_time_log", new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_transformation_log  = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_transformation_log", new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_mining_log          = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_mining_log", new TFLogBlock(logProperties(MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_sorting_log         = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_sorting_log", new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock time_wood                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_wood", new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock transformation_wood          = Registry.register(Registry.BLOCK, TFConstants.ID + ":transformation_wood", new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock mining_wood                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":mining_wood", new TFLogBlock(logProperties(MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock sorting_wood                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":sorting_wood", new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_time_wood           = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_time_wood", new TFLogBlock(logProperties(MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_transformation_wood = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_transformation_wood", new TFLogBlock(logProperties(MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_mining_wood         = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_mining_wood", new TFLogBlock(logProperties(MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
	public static final RotatedPillarBlock stripped_sorting_wood        = Registry.register(Registry.BLOCK, TFConstants.ID + ":stripped_sorting_wood", new TFLogBlock(logProperties(MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
	public static final Block time_log_core              = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_log_core", new SpecialMagicLogBlock(logProperties(MaterialColor.DIRT, MaterialColor.PODZOL), MagicWoodVariant.TIME));
	public static final Block transformation_log_core    = Registry.register(Registry.BLOCK, TFConstants.ID + ":transformation_log_core", new SpecialMagicLogBlock(logProperties(MaterialColor.WOOD, MaterialColor.PODZOL), MagicWoodVariant.TRANS));
	public static final Block mining_log_core            = Registry.register(Registry.BLOCK, TFConstants.ID + ":mining_log_core", new SpecialMagicLogBlock(logProperties(MaterialColor.SAND, MaterialColor.QUARTZ), MagicWoodVariant.MINE));
	public static final Block sorting_log_core           = Registry.register(Registry.BLOCK, TFConstants.ID + ":sorting_log_core", new SpecialMagicLogBlock(logProperties(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN), MagicWoodVariant.SORT));
	public static final Block time_leaves                = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_leaves", new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.AZALEA_LEAVES).randomTicks().noOcclusion()));
	public static final Block transformation_leaves      = Registry.register(Registry.BLOCK, TFConstants.ID + ":transformation_leaves", new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.AZALEA_LEAVES).randomTicks().noOcclusion()));
	public static final Block mining_leaves              = Registry.register(Registry.BLOCK, TFConstants.ID + ":mining_leaves", new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.AZALEA_LEAVES).randomTicks().noOcclusion()));
	public static final Block sorting_leaves             = Registry.register(Registry.BLOCK, TFConstants.ID + ":sorting_leaves", new MagicLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).sound(SoundType.AZALEA_LEAVES).randomTicks().noOcclusion()));
	public static final Block firefly                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":firefly", new FireflyBlock(BlockBehaviour.Properties.of(new Material.Builder(MaterialColor.GRASS).noCollider().nonSolid().build()).lightLevel((state) -> 15).sound(SoundType.SLIME_BLOCK).strength(0.0F).noCollission()));
	public static final Block cicada                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":cicada", new CicadaBlock(BlockBehaviour.Properties.of(new Material.Builder(MaterialColor.GRASS).noCollider().nonSolid().build()).sound(SoundType.SLIME_BLOCK).strength(0.0F).noCollission()));
	public static final Block moonworm                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":moonworm", new MoonwormBlock(BlockBehaviour.Properties.of(new Material.Builder(MaterialColor.GRASS).noCollider().nonSolid().build()).lightLevel((state) -> 14).sound(SoundType.SLIME_BLOCK).strength(0.0F).noCollission()));
	public static final Block tower_wood                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":tower_wood", new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final Block tower_wood_encased         = Registry.register(Registry.BLOCK, TFConstants.ID + ":tower_wood_encased", new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final Block tower_wood_cracked         = Registry.register(Registry.BLOCK, TFConstants.ID + ":tower_wood_cracked", new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final Block tower_wood_mossy           = Registry.register(Registry.BLOCK, TFConstants.ID + ":tower_wood_mossy", new FlammableBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(40.0F, 10.0F).sound(SoundType.WOOD)));
	public static final Block tower_wood_infested        = Registry.register(Registry.BLOCK, TFConstants.ID + ":tower_wood_infested", new InfestedTowerwoodBlock(1, 0, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(0.75F, 10.0F).sound(SoundType.WOOD)));
	public static final Block reappearing_block          = Registry.register(Registry.BLOCK, TFConstants.ID + ":reappearing_block", new ReappearingBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> 4)));
	// FIXME Split Vanishing block into regular breakable variant, and then the unbreakable variant
	public static final RegistryObject<Block> vanishing_block            = BLOCKS.register("vanishing_block", () -> new VanishingBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(-1.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(VanishingBlock.ACTIVE) ? 4 : 0)));
	public static final RegistryObject<Block> locked_vanishing_block     = BLOCKS.register("locked_vanishing_block", () -> new LockedVanishingBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(-1.0F, 35.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> carminite_builder          = BLOCKS.register("carminite_builder", () -> new BuilderBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(BuilderBlock.STATE) == TowerDeviceVariant.BUILDER_ACTIVE ? 4 : 0)));
	public static final RegistryObject<Block> built_block                = BLOCKS.register("built_block", () -> new TranslucentBuiltBlock(BlockBehaviour.Properties.of(Material.GLASS).strength(50.0F, 2000.0F).sound(SoundType.METAL).noOcclusion().noDrops()));
	public static final RegistryObject<Block> antibuilder                = BLOCKS.register("antibuilder", () -> new AntibuilderBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> 10)));
	public static final RegistryObject<Block> antibuilt_block            = BLOCKS.register("antibuilt_block", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 2000.0F).sound(SoundType.METAL).noDrops().noOcclusion()));
	public static final RegistryObject<GhastTrapBlock> ghast_trap      = BLOCKS.register("ghast_trap", () -> new GhastTrapBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(GhastTrapBlock.ACTIVE) ? 15 : 0)));
	public static final RegistryObject<Block> carminite_reactor          = BLOCKS.register("carminite_reactor", () -> new CarminiteReactorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).requiresCorrectToolForDrops().strength(10.0F, 35.0F).sound(SoundType.WOOD).lightLevel((state) -> state.getValue(CarminiteReactorBlock.ACTIVE) ? 15 : 0)));
	public static final RegistryObject<Block> reactor_debris             = BLOCKS.register("reactor_debris", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(0.3F, 2000.0F).sound(SoundType.METAL).noDrops().noOcclusion()));
	public static final RegistryObject<Block> fake_gold                  = BLOCKS.register("fake_gold", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(50.0F, 2000.0F).sound(SoundType.METAL).noDrops()));
	public static final RegistryObject<Block> fake_diamond               = BLOCKS.register("fake_diamond", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS).strength(50.0F, 2000.0F).sound(SoundType.METAL).noDrops()));
	public static final RegistryObject<TrophyBlock> naga_trophy           = BLOCKS.register("naga_trophy", () -> new TrophyBlock(BossVariant.NAGA, 5));
	public static final RegistryObject<TrophyBlock> lich_trophy           = BLOCKS.register("lich_trophy", () -> new TrophyBlock(BossVariant.LICH, 6));
	public static final RegistryObject<TrophyBlock> hydra_trophy          = BLOCKS.register("hydra_trophy", () -> new TrophyBlock(BossVariant.HYDRA, 12));
	public static final RegistryObject<TrophyBlock> ur_ghast_trophy       = BLOCKS.register("ur_ghast_trophy", () -> new TrophyBlock(BossVariant.UR_GHAST, 13));
	public static final RegistryObject<TrophyBlock> knight_phantom_trophy = BLOCKS.register("knight_phantom_trophy", () -> new TrophyBlock(BossVariant.KNIGHT_PHANTOM, 8));
	public static final RegistryObject<TrophyBlock> snow_queen_trophy     = BLOCKS.register("snow_queen_trophy", () -> new TrophyBlock(BossVariant.SNOW_QUEEN, 14));
	public static final RegistryObject<TrophyBlock> minoshroom_trophy     = BLOCKS.register("minoshroom_trophy", () -> new TrophyBlock(BossVariant.MINOSHROOM, 7));
	public static final RegistryObject<TrophyBlock> yeti_trophy           = BLOCKS.register("yeti_trophy", () -> new TrophyBlock(BossVariant.ALPHA_YETI, 9));
	public static final RegistryObject<TrophyBlock> quest_ram_trophy      = BLOCKS.register("quest_ram_trophy", () -> new TrophyBlock(BossVariant.QUEST_RAM, 1));
	public static final RegistryObject<TrophyWallBlock> naga_wall_trophy           = BLOCKS.register("naga_wall_trophy", () -> new TrophyWallBlock(BossVariant.NAGA));
	public static final RegistryObject<TrophyWallBlock> lich_wall_trophy           = BLOCKS.register("lich_wall_trophy", () -> new TrophyWallBlock(BossVariant.LICH));
	public static final RegistryObject<TrophyWallBlock> hydra_wall_trophy          = BLOCKS.register("hydra_wall_trophy", () -> new TrophyWallBlock(BossVariant.HYDRA));
	public static final RegistryObject<TrophyWallBlock> ur_ghast_wall_trophy       = BLOCKS.register("ur_ghast_wall_trophy", () -> new TrophyWallBlock(BossVariant.UR_GHAST));
	public static final RegistryObject<TrophyWallBlock> knight_phantom_wall_trophy = BLOCKS.register("knight_phantom_wall_trophy", () -> new TrophyWallBlock(BossVariant.KNIGHT_PHANTOM));
	public static final RegistryObject<TrophyWallBlock> snow_queen_wall_trophy     = BLOCKS.register("snow_queen_wall_trophy", () -> new TrophyWallBlock(BossVariant.SNOW_QUEEN));
	public static final RegistryObject<TrophyWallBlock> minoshroom_wall_trophy     = BLOCKS.register("minoshroom_wall_trophy", () -> new TrophyWallBlock(BossVariant.MINOSHROOM));
	public static final RegistryObject<TrophyWallBlock> yeti_wall_trophy           = BLOCKS.register("yeti_wall_trophy", () -> new TrophyWallBlock(BossVariant.ALPHA_YETI));
	public static final RegistryObject<TrophyWallBlock> quest_ram_wall_trophy      = BLOCKS.register("quest_ram_wall_trophy", () -> new TrophyWallBlock(BossVariant.QUEST_RAM));
	public static final RegistryObject<Block> stronghold_shield           = BLOCKS.register("stronghold_shield", () -> new StrongholdShieldBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(-1.0F, 6000000.0F).sound(SoundType.METAL).noDrops()));
	public static final RegistryObject<Block> trophy_pedestal             = BLOCKS.register("trophy_pedestal", () -> new TrophyPedestalBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 2000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> aurora_block                = BLOCKS.register("aurora_block", () -> new AuroraBrickBlock(BlockBehaviour.Properties.of(Material.ICE_SOLID).strength(10.0F, 10.0F)));
	public static final RegistryObject<RotatedPillarBlock> aurora_pillar  = BLOCKS.register("aurora_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.ICE_SOLID).requiresCorrectToolForDrops().strength(2.0F, 10.0F)));
	public static final RegistryObject<Block> aurora_slab                 = BLOCKS.register("aurora_slab", () -> new SlabBlock(BlockBehaviour.Properties.of(Material.ICE_SOLID).requiresCorrectToolForDrops().strength(2.0F, 10.0F)));
	public static final RegistryObject<Block> auroralized_glass           = BLOCKS.register("auroralized_glass", () -> new AuroralizedGlassBlock(BlockBehaviour.Properties.of(Material.ICE).noOcclusion()));
	public static final RegistryObject<Block> underbrick                  = BLOCKS.register("underbrick", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> underbrick_mossy            = BLOCKS.register("underbrick_mossy", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> underbrick_cracked          = BLOCKS.register("underbrick_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> underbrick_floor            = BLOCKS.register("underbrick_floor", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOD).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> brown_thorns                = BLOCKS.register("brown_thorns", () -> new ThornsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(50.0F, 2000.0F).sound(SoundType.WOOD).noDrops()));
	public static final RegistryObject<Block> green_thorns                = BLOCKS.register("green_thorns", () -> new ThornsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PLANT).strength(50.0F, 2000.0F).sound(SoundType.WOOD).noDrops()));
	public static final RegistryObject<Block> burnt_thorns                = BLOCKS.register("burnt_thorns", () -> new BurntThornsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.STONE).strength(0.01F, 0.0F).sound(SoundType.SAND).noDrops()));
	public static final RegistryObject<Block> thorn_rose                  = BLOCKS.register("thorn_rose", () -> new ThornRoseBlock(BlockBehaviour.Properties.of(Material.PLANT).strength(10.0F, 0.0F).sound(SoundType.GRASS).noCollission()));
	public static final RegistryObject<Block> thorn_leaves                = BLOCKS.register("thorn_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.AZALEA_LEAVES)));
	public static final RegistryObject<Block> beanstalk_leaves            = BLOCKS.register("beanstalk_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES).strength(0.2F).randomTicks().noOcclusion().sound(SoundType.AZALEA_LEAVES)));
	public static final RegistryObject<Block> deadrock                    = BLOCKS.register("deadrock", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> deadrock_cracked            = BLOCKS.register("deadrock_cracked", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> deadrock_weathered          = BLOCKS.register("deadrock_weathered", () -> new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(100.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> trollsteinn                 = BLOCKS.register("trollsteinn", () -> new TrollsteinnBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> wispy_cloud                 = BLOCKS.register("wispy_cloud", () -> new HalfTransparentBlock(BlockBehaviour.Properties.of(Material.TOP_SNOW).strength(0.3F).sound(SoundType.WOOL).noOcclusion()));
	public static final RegistryObject<Block> fluffy_cloud                = BLOCKS.register("fluffy_cloud", () -> new Block(BlockBehaviour.Properties.of(Material.ICE_SOLID).strength(0.8F, 0.0F).sound(SoundType.WOOL)));
	public static final RegistryObject<Block> giant_cobblestone           = BLOCKS.register("giant_cobblestone", () -> new GiantBlock(BlockBehaviour.Properties.copy(Blocks.COBBLESTONE).requiresCorrectToolForDrops().strength(128, 10)));
	public static final RegistryObject<Block> giant_log                   = BLOCKS.register("giant_log", () -> new GiantLogBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LOG).requiresCorrectToolForDrops().strength(128, 0)));
	public static final RegistryObject<Block> giant_leaves                = BLOCKS.register("giant_leaves", () -> new GiantLeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES).requiresCorrectToolForDrops().strength(0.2F * 64F, 0.0F).sound(SoundType.AZALEA_LEAVES).noOcclusion()));
	public static final RegistryObject<Block> giant_obsidian              = BLOCKS.register("giant_obsidian", () -> new GiantBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN).requiresCorrectToolForDrops().strength(50.0F * 64F * 64F, 2000.0F * 64F * 64F)));
	public static final RegistryObject<Block> uberous_soil                = BLOCKS.register("uberous_soil", () -> new UberousSoilBlock(BlockBehaviour.Properties.of(Material.DIRT).strength(0.6F).sound(SoundType.GRAVEL)));
	public static final RegistryObject<RotatedPillarBlock> huge_stalk     = BLOCKS.register("huge_stalk", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PLANT).strength(1.25F, 7.0F).sound(SoundType.STEM)));
	public static final RegistryObject<Block> huge_mushgloom              = BLOCKS.register("huge_mushgloom", () -> new HugeMushroomBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(0.2F).sound(SoundType.WOOD).lightLevel((state) -> 5)));
	public static final RegistryObject<Block> huge_mushgloom_stem         = BLOCKS.register("huge_mushgloom_stem", () -> new HugeMushroomBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(0.2F).sound(SoundType.WOOD).lightLevel((state) -> 5)));
	public static final RegistryObject<Block> trollvidr                   = BLOCKS.register("trollvidr", () -> new TrollRootBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS).noCollission()));
	public static final RegistryObject<Block> unripe_trollber             = BLOCKS.register("unripe_trollber", () -> new UnripeTorchClusterBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS).noCollission().randomTicks()));
	public static final RegistryObject<Block> trollber                    = BLOCKS.register("trollber", () -> new TrollRootBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS).noCollission().lightLevel((state) -> 15)));
	public static final RegistryObject<HugeLilyPadBlock> huge_lilypad   = BLOCKS.register("huge_lilypad", () -> new HugeLilyPadBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS)));
	public static final RegistryObject<Block> huge_waterlily              = BLOCKS.register("huge_waterlily", () -> new HugeWaterLilyBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.GRASS)));
	public static final RegistryObject<RotatedPillarBlock> slider         = BLOCKS.register("slider", SliderBlock::new);
	public static final RegistryObject<Block> castle_brick                = BLOCKS.register("castle_brick", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_worn           = BLOCKS.register("castle_brick_worn", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_cracked        = BLOCKS.register("castle_brick_cracked", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_roof           = BLOCKS.register("castle_brick_roof", () -> new CastleBlock(MaterialColor.COLOR_GRAY));
	public static final RegistryObject<Block> castle_brick_mossy          = BLOCKS.register("castle_brick_mossy", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_brick_frame          = BLOCKS.register("castle_brick_frame", () -> new CastleBlock(MaterialColor.QUARTZ));
	public static final RegistryObject<Block> castle_pillar_encased       = BLOCKS.register("castle_pillar_encased", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_pillar_encased_tile  = BLOCKS.register("castle_pillar_encased_tile", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_pillar_bold          = BLOCKS.register("castle_pillar_bold", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_pillar_bold_tile     = BLOCKS.register("castle_pillar_bold_tile", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 35.0F).sound(SoundType.STONE)));
	public static final RegistryObject<StairBlock> castle_stairs_brick   = BLOCKS.register("castle_stairs_brick", () -> new StairBlock(castle_brick.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick.get())));
	public static final RegistryObject<StairBlock> castle_stairs_worn    = BLOCKS.register("castle_stairs_worn", () -> new StairBlock(castle_brick_worn.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick_worn.get())));
	public static final RegistryObject<StairBlock> castle_stairs_cracked = BLOCKS.register("castle_stairs_cracked", () -> new StairBlock(castle_brick_cracked.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick_cracked.get())));
	public static final RegistryObject<StairBlock> castle_stairs_mossy   = BLOCKS.register("castle_stairs_mossy", () -> new StairBlock(castle_brick_mossy.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_brick_mossy.get())));
	public static final RegistryObject<StairBlock> castle_stairs_encased = BLOCKS.register("castle_stairs_encased", () -> new StairBlock(castle_pillar_encased.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_pillar_encased.get())));
	public static final RegistryObject<StairBlock> castle_stairs_bold    = BLOCKS.register("castle_stairs_bold", () -> new StairBlock(castle_pillar_bold.get().defaultBlockState(), BlockBehaviour.Properties.copy(castle_pillar_bold.get())));
	public static final RegistryObject<Block> castle_rune_brick_pink      = BLOCKS.register("castle_rune_brick_pink", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_rune_brick_blue      = BLOCKS.register("castle_rune_brick_blue", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_rune_brick_yellow    = BLOCKS.register("castle_rune_brick_yellow", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> castle_rune_brick_purple    = BLOCKS.register("castle_rune_brick_purple", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.QUARTZ).requiresCorrectToolForDrops().strength(100.0F, 15.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> force_field_purple          = BLOCKS.register("force_field_purple", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_pink            = BLOCKS.register("force_field_pink", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_orange          = BLOCKS.register("force_field_orange", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_green           = BLOCKS.register("force_field_green", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> force_field_blue            = BLOCKS.register("force_field_blue", () -> new ForceFieldBlock(BlockBehaviour.Properties.of(Material.BARRIER).strength(-1.0F).lightLevel((state) -> 2).noDrops().noOcclusion()));
	public static final RegistryObject<Block> cinder_furnace              = BLOCKS.register("cinder_furnace", CinderFurnaceBlock::new);
	public static final RegistryObject<RotatedPillarBlock> cinder_log     = BLOCKS.register("cinder_log", () -> new TFLogBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(1.0F)));
	public static final RegistryObject<Block> cinder_wood                 = BLOCKS.register("cinder_wood", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(1.0F)));
	public static final RegistryObject<Block> castle_door_yellow          = BLOCKS.register("castle_door_yellow", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> castle_door_purple          = BLOCKS.register("castle_door_purple", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> castle_door_pink            = BLOCKS.register("castle_door_pink", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> castle_door_blue            = BLOCKS.register("castle_door_blue", () -> new CastleDoorBlock(BlockBehaviour.Properties.of(Material.STONE, (state) -> state.getValue(CastleDoorBlock.VANISHED) ? MaterialColor.NONE : MaterialColor.COLOR_CYAN).requiresCorrectToolForDrops().strength(100.0F, 35.0F)));
	public static final RegistryObject<Block> experiment_115              = BLOCKS.register("experiment_115", Experiment115Block::new);
	public static final RegistryObject<Block> twilight_portal_miniature_structure = BLOCKS.register("twilight_portal_miniature_structure", MiniatureStructureBlock::new);
//	public static final RegistryObject<Block> hedge_maze_miniature_structure = BLOCKS.register("hedge_maze_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> hollow_hill_miniature_structure = BLOCKS.register("hollow_hill_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> quest_grove_miniature_structure = BLOCKS.register("quest_grove_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> mushroom_tower_miniature_structure = BLOCKS.register("mushroom_tower_miniature_structure", () -> new BlockTFMiniatureStructure());
	public static final RegistryObject<Block> naga_courtyard_miniature_structure = BLOCKS.register("naga_courtyard_miniature_structure", MiniatureStructureBlock::new);
	public static final RegistryObject<Block> lich_tower_miniature_structure = BLOCKS.register("lich_tower_miniature_structure", MiniatureStructureBlock::new);
//	public static final RegistryObject<Block> minotaur_labyrinth_miniature_structure = BLOCKS.register("minotaur_labyrinth_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> hydra_lair_miniature_structure = BLOCKS.register("hydra_lair_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> goblin_stronghold_miniature_structure = BLOCKS.register("goblin_stronghold_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> dark_tower_miniature_structure = BLOCKS.register("dark_tower_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> yeti_cave_miniature_structure = BLOCKS.register("yeti_cave_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> aurora_palace_miniature_structure = BLOCKS.register("aurora_palace_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> troll_cave_cottage_miniature_structure = BLOCKS.register("troll_cave_cottage_miniature_structure", () -> new BlockTFMiniatureStructure());
//	public static final RegistryObject<Block> final_castle_miniature_structure = BLOCKS.register("final_castle_miniature_structure", () -> new BlockTFMiniatureStructure());
	public static final RegistryObject<Block> knightmetal_block = BLOCKS.register("knightmetal_block", () -> new KnightmetalBlock(BlockBehaviour.Properties.of(Material.METAL).requiresCorrectToolForDrops().strength(5.0F, 41.0F).sound(SoundType.NETHERITE_BLOCK)));
	public static final RegistryObject<Block> ironwood_block = BLOCKS.register("ironwood_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(5.0F, 10.0F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> fiery_block = BLOCKS.register("fiery_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.TERRACOTTA_BLACK).requiresCorrectToolForDrops().strength(5.0F, 10.0F).sound(SoundType.METAL).noOcclusion().emissiveRendering((state, world, pos) -> true)));
	public static final RegistryObject<Block> steeleaf_block = BLOCKS.register("steeleaf_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.LEAVES, MaterialColor.PLANT).strength(5.0F, 10.0F).sound(SoundType.MOSS)));
	public static final RegistryObject<Block> arctic_fur_block = BLOCKS.register("arctic_fur_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.WOOL, MaterialColor.WOOL).strength(0.8F, 10.0F).sound(SoundType.WOOL)));
	public static final RegistryObject<Block> carminite_block = BLOCKS.register("carminite_block", () -> new CompressedBlock(BlockBehaviour.Properties.of(Material.CLAY, MaterialColor.COLOR_RED).strength(0.0F, 10.0F).sound(SoundType.SLIME_BLOCK)));
	public static final RegistryObject<Block> spiral_bricks = BLOCKS.register("spiral_bricks", SpiralBrickBlock::new);
	public static final RegistryObject<Block> etched_nagastone = BLOCKS.register("etched_nagastone", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> nagastone_pillar = BLOCKS.register("nagastone_pillar", NagastonePillarBlock::new);
	public static final RegistryObject<StairBlock> nagastone_stairs_left = BLOCKS.register("nagastone_stairs_left", () -> new StairBlock(etched_nagastone.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone.get())));
	public static final RegistryObject<StairBlock> nagastone_stairs_right = BLOCKS.register("nagastone_stairs_right", () -> new StairBlock(etched_nagastone.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone.get())));
	public static final RegistryObject<Block> etched_nagastone_mossy = BLOCKS.register("etched_nagastone_mossy", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> nagastone_pillar_mossy = BLOCKS.register("nagastone_pillar_mossy", NagastonePillarBlock::new);
	public static final RegistryObject<StairBlock> nagastone_stairs_mossy_left = BLOCKS.register("nagastone_stairs_mossy_left", () -> new StairBlock(etched_nagastone_mossy.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_mossy.get())));
	public static final RegistryObject<StairBlock> nagastone_stairs_mossy_right = BLOCKS.register("nagastone_stairs_mossy_right", () -> new StairBlock(etched_nagastone_mossy.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_mossy.get())));
	public static final RegistryObject<Block> etched_nagastone_weathered = BLOCKS.register("etched_nagastone_weathered", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final RegistryObject<Block> nagastone_pillar_weathered = BLOCKS.register("nagastone_pillar_weathered", NagastonePillarBlock::new);
	public static final RegistryObject<StairBlock> nagastone_stairs_weathered_left = BLOCKS.register("nagastone_stairs_weathered_left", () -> new StairBlock(etched_nagastone_weathered.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_weathered.get())));
	public static final RegistryObject<StairBlock> nagastone_stairs_weathered_right = BLOCKS.register("nagastone_stairs_weathered_right", () -> new StairBlock(etched_nagastone_weathered.get().defaultBlockState(), BlockBehaviour.Properties.copy(etched_nagastone_weathered.get())));
	public static final RegistryObject<Block> iron_ladder = BLOCKS.register("iron_ladder", () -> new IronLadderBlock(BlockBehaviour.Properties.of(Material.DECORATION).requiresCorrectToolForDrops().strength(5.0F, 10.0F).sound(SoundType.METAL).noOcclusion()));
	//public static final RegistryObject<Block> terrorcotta_circle = BLOCKS.register("terrorcotta_circle", () -> new BlockTFHorizontal(Block.Properties.create(Material.ROCK, MaterialColor.SAND).setRequiresTool().hardnessAndResistance(1.7F).sound(SoundType.STONE)));
	//public static final RegistryObject<Block> terrorcotta_diagonal = BLOCKS.register("terrorcotta_diagonal", () -> new BlockTFDiagonal(Block.Properties.create(Material.ROCK, MaterialColor.SAND).setRequiresTool().hardnessAndResistance(1.7F).sound(SoundType.STONE)));
	public static final RegistryObject<RotatedPillarBlock> stone_twist = BLOCKS.register("stone_twist", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
	public static final RegistryObject<Block> stone_twist_thin = BLOCKS.register("stone_twist_thin", () -> new WallPillarBlock(Material.STONE, 12, 16));
	//public static final RegistryObject<Block> lapis_block = BLOCKS.register("lapis_block", () -> new Block(Block.Properties.create(Material.IRON).setRequiresTool().hardnessAndResistance(3.0F, 5.0F).sound(SoundType.STONE)));
	public static final RegistryObject<KeepsakeCasketBlock> keepsake_casket = BLOCKS.register("keepsake_casket", KeepsakeCasketBlock::new);
	public static final RegistryObject<RotatedPillarBlock> stone_bold = BLOCKS.register("stone_pillar_bold", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
	public static final RegistryObject<Block> tome_spawner = BLOCKS.register("death_tome_spawner", () -> new TomeSpawnerBlock(BlockBehaviour.Properties.of(Material.WOOD).strength(2.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<Block> empty_bookshelf = BLOCKS.register("empty_bookshelf", () -> new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.WOOD)));
	public static final RegistryObject<CandelabraBlock> candelabra = BLOCKS.register("candelabra", () -> new CandelabraBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.STONE).lightLevel(state -> state.getValue(CandelabraBlock.LIT) ? 15 : 0)));

	public static final AbstractSkullCandleBlock zombie_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":zombie_skull_candle", new SkullCandleBlock(SkullBlock.Types.ZOMBIE, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock zombie_wall_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":zombie_wall_skull_candle", new WallSkullCandleBlock(SkullBlock.Types.ZOMBIE, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock skeleton_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":skeleton_skull_candle", new SkullCandleBlock(SkullBlock.Types.SKELETON, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock skeleton_wall_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":skeleton_wall_skull_candle", new WallSkullCandleBlock(SkullBlock.Types.SKELETON, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock wither_skele_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":wither_skeleton_skull_candle", new SkullCandleBlock(SkullBlock.Types.WITHER_SKELETON, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock wither_skele_wall_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":wither_skeleton_wall_skull_candle", new WallSkullCandleBlock(SkullBlock.Types.WITHER_SKELETON, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock creeper_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":creeper_skull_candle", new SkullCandleBlock(SkullBlock.Types.CREEPER, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock creeper_wall_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":creeper_wall_skull_candle", new WallSkullCandleBlock(SkullBlock.Types.CREEPER, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock player_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":player_skull_candle", new SkullCandleBlock(SkullBlock.Types.PLAYER, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));
	public static final AbstractSkullCandleBlock player_wall_skull_candle = Registry.register(Registry.BLOCK, TFConstants.ID + ":player_wall_skull_candle", new WallSkullCandleBlock(SkullBlock.Types.PLAYER, BlockBehaviour.Properties.copy(Blocks.ZOMBIE_HEAD).lightLevel(AbstractSkullCandleBlock.LIGHT_EMISSION)));

	//Pot all the things!
	public static final FlowerPotBlock potted_twilight_oak_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_twilight_oak_sapling", new FlowerPotBlock(oak_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_canopy_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_canopy_sapling", new FlowerPotBlock(canopy_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_mangrove_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_mangrove_sapling", new FlowerPotBlock(mangrove_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_darkwood_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_darkwood_sapling", new FlowerPotBlock(darkwood_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_hollow_oak_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_hollow_oak_sapling", new FlowerPotBlock(hollow_oak_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_rainboak_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_rainboak_sapling", new FlowerPotBlock(rainboak_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_time_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_time_sapling", new FlowerPotBlock(time_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_trans_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_trans_sapling", new FlowerPotBlock(transformation_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_mine_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_mine_sapling", new FlowerPotBlock(mining_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_sort_sapling = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_sort_sapling", new FlowerPotBlock(sorting_sapling, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_mayapple = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_mayapple", new FlowerPotBlock(mayapple, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_fiddlehead = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_fiddlehead", new FlowerPotBlock(fiddlehead, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_mushgloom = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_mushgloom", new FlowerPotBlock(mushgloom, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_thorn = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_thorn", new FlowerPotBlock(brown_thorns, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_green_thorn = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_green_thorn", new FlowerPotBlock(green_thorns, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));
	public static final FlowerPotBlock potted_dead_thorn = Registry.register(Registry.BLOCK, TFConstants.ID + ":potted_dead_thorn", new FlowerPotBlock(burnt_thorns, BlockBehaviour.Properties.copy(Blocks.FLOWER_POT)));

	public static final BanisterBlock oak_banister          = Registry.register(Registry.BLOCK, TFConstants.ID + ":oak_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)));
	public static final BanisterBlock spruce_banister       = Registry.register(Registry.BLOCK, TFConstants.ID + ":spruce_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_PLANKS)));
	public static final BanisterBlock birch_banister        = Registry.register(Registry.BLOCK, TFConstants.ID + ":birch_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_PLANKS)));
	public static final BanisterBlock jungle_banister       = Registry.register(Registry.BLOCK, TFConstants.ID + ":jungle_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_PLANKS)));
	public static final BanisterBlock acacia_banister       = Registry.register(Registry.BLOCK, TFConstants.ID + ":acacia_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_PLANKS)));
	public static final BanisterBlock dark_oak_banister     = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_oak_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_PLANKS)));
	public static final BanisterBlock crimson_banister      = Registry.register(Registry.BLOCK, TFConstants.ID + ":crimson_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_PLANKS)));
	public static final BanisterBlock warped_banister       = Registry.register(Registry.BLOCK, TFConstants.ID + ":warped_banister", new BanisterBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_PLANKS)));

	public static final WoodType TWILIGHT_OAK = WoodType.register(new WoodType("twilight_oak"));
	public static final WoodType CANOPY = WoodType.register(new WoodType("canopy"));
	public static final WoodType MANGROVE = WoodType.register(new WoodType("mangrove"));
	public static final WoodType DARKWOOD = WoodType.register(new WoodType("darkwood"));
	public static final WoodType TIMEWOOD = WoodType.register(new WoodType("timewood"));
	public static final WoodType TRANSFORMATION = WoodType.register(new WoodType("transformation"));
	public static final WoodType MINING = WoodType.register(new WoodType("mining"));
	public static final WoodType SORTING = WoodType.register(new WoodType("sorting"));
	// TODO chests? boats?
	public static final Block twilight_oak_planks           = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock twilight_oak_stairs      = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_stairs", new StairBlock(twilight_oak_planks.defaultBlockState(), BlockBehaviour.Properties.copy(twilight_oak_planks)));
	public static final Block twilight_oak_slab             = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_slab", new SlabBlock(BlockBehaviour.Properties.copy(twilight_oak_planks)));
	public static final Block twilight_oak_button           = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(twilight_oak_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block twilight_oak_fence            = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_fence", new FenceBlock(BlockBehaviour.Properties.copy(twilight_oak_planks)));
	public static final Block twilight_oak_gate             = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(twilight_oak_planks)));
	public static final Block twilight_oak_plate            = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(twilight_oak_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock twilight_oak_door         = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_door", new DoorBlock(BlockBehaviour.Properties.copy(twilight_oak_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock twilight_oak_trapdoor = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(twilight_oak_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock twilight_oak_sign = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_sign", new TFSignBlock(BlockBehaviour.Properties.copy(twilight_oak_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TWILIGHT_OAK));
	public static final WallSignBlock twilight_wall_sign    = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(twilight_oak_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TWILIGHT_OAK));
	public static final BanisterBlock twilight_oak_banister = Registry.register(Registry.BLOCK, TFConstants.ID + ":twilight_oak_banister", new BanisterBlock(BlockBehaviour.Properties.copy(twilight_oak_planks)));
	public static final Block canopy_planks                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock canopy_stairs            = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_stairs", new StairBlock(canopy_planks.defaultBlockState(), BlockBehaviour.Properties.copy(canopy_planks)));
	public static final Block canopy_slab                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_slab", new SlabBlock(BlockBehaviour.Properties.copy(canopy_planks)));
	public static final Block canopy_button                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(canopy_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block canopy_fence                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_fence", new FenceBlock(BlockBehaviour.Properties.copy(canopy_planks)));
	public static final Block canopy_gate                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(canopy_planks)));
	public static final Block canopy_plate                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(canopy_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock canopy_door               = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_door", new DoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock canopy_trapdoor       = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock canopy_sign       = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_sign", new TFSignBlock(BlockBehaviour.Properties.copy(canopy_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), CANOPY));
	public static final WallSignBlock canopy_wall_sign      = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(canopy_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), CANOPY));
	public static final Block canopy_bookshelf              = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_bookshelf", new BookshelfBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(1.5F).sound(SoundType.WOOD)));
	public static final BanisterBlock canopy_banister       = Registry.register(Registry.BLOCK, TFConstants.ID + ":canopy_banister", new BanisterBlock(BlockBehaviour.Properties.copy(canopy_planks)));
	public static final Block mangrove_planks               = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock mangrove_stairs          = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_stairs", new StairBlock(mangrove_planks.defaultBlockState(), BlockBehaviour.Properties.copy(mangrove_planks)));
	public static final Block mangrove_slab                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_slab", new SlabBlock(BlockBehaviour.Properties.copy(mangrove_planks).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final Block mangrove_button               = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(mangrove_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block mangrove_fence                = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_fence", new FenceBlock(BlockBehaviour.Properties.copy(mangrove_planks)));
	public static final Block mangrove_gate                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(mangrove_planks)));
	public static final Block mangrove_plate                = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(mangrove_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock mangrove_door             = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_door", new DoorBlock(BlockBehaviour.Properties.copy(mangrove_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock mangrove_trapdoor     = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(mangrove_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock mangrove_sign     = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_sign", new TFSignBlock(BlockBehaviour.Properties.copy(mangrove_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MANGROVE));
	public static final WallSignBlock mangrove_wall_sign    = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(mangrove_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MANGROVE));
	public static final BanisterBlock mangrove_banister     = Registry.register(Registry.BLOCK, TFConstants.ID + ":mangrove_banister", new BanisterBlock(BlockBehaviour.Properties.copy(mangrove_planks)));
	public static final Block dark_planks                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock dark_stairs              = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_stairs", new StairBlock(dark_planks.defaultBlockState(), BlockBehaviour.Properties.copy(dark_planks)));
	public static final Block dark_slab                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_slab", new SlabBlock(BlockBehaviour.Properties.copy(dark_planks).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final Block dark_button                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(dark_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block dark_fence                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_fence", new FenceBlock(BlockBehaviour.Properties.copy(dark_planks)));
	public static final Block dark_gate                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(dark_planks)));
	public static final Block dark_plate                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(dark_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock dark_door                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_door", new DoorBlock(BlockBehaviour.Properties.copy(dark_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock dark_trapdoor         = Registry.register(Registry.BLOCK, TFConstants.ID + ":dark_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(dark_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock darkwood_sign     = Registry.register(Registry.BLOCK, TFConstants.ID + ":darkwood_sign", new TFSignBlock(BlockBehaviour.Properties.copy(dark_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), DARKWOOD));
	public static final WallSignBlock darkwood_wall_sign    = Registry.register(Registry.BLOCK, TFConstants.ID + ":darkwood_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(dark_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), DARKWOOD));
	public static final BanisterBlock darkwood_banister     = Registry.register(Registry.BLOCK, TFConstants.ID + ":darkwood_banister", new BanisterBlock(BlockBehaviour.Properties.copy(dark_planks)));
	public static final Block time_planks                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock time_stairs              = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_stairs", new StairBlock(time_planks.defaultBlockState(), BlockBehaviour.Properties.copy(time_planks)));
	public static final Block time_slab                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_slab", new SlabBlock(BlockBehaviour.Properties.copy(time_planks).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final Block time_button                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(time_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block time_fence                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_fence", new FenceBlock(BlockBehaviour.Properties.copy(time_planks)));
	public static final Block time_gate                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(time_planks)));
	public static final Block time_plate                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(time_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock time_door                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_door", new DoorBlock(BlockBehaviour.Properties.copy(time_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock time_trapdoor         = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(time_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock time_sign         = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_sign", new TFSignBlock(BlockBehaviour.Properties.copy(time_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TIMEWOOD));
	public static final WallSignBlock time_wall_sign        = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(time_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TIMEWOOD));
	public static final BanisterBlock time_banister         = Registry.register(Registry.BLOCK, TFConstants.ID + ":time_banister", new BanisterBlock(BlockBehaviour.Properties.copy(time_planks)));
	public static final Block trans_planks                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock trans_stairs             = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_stairs", new StairBlock(trans_planks.defaultBlockState(), BlockBehaviour.Properties.copy(trans_planks)));
	public static final Block trans_slab                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_slab", new SlabBlock(BlockBehaviour.Properties.copy(trans_planks).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final Block trans_button                  = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(trans_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block trans_fence                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_fence", new FenceBlock(BlockBehaviour.Properties.copy(trans_planks)));
	public static final Block trans_gate                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(trans_planks)));
	public static final Block trans_plate                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(trans_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock trans_door                = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_door", new DoorBlock(BlockBehaviour.Properties.copy(trans_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock trans_trapdoor        = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(trans_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock trans_sign        = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_sign", new TFSignBlock(BlockBehaviour.Properties.copy(trans_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TRANSFORMATION));
	public static final WallSignBlock trans_wall_sign       = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(trans_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), TRANSFORMATION));
	public static final BanisterBlock trans_banister        = Registry.register(Registry.BLOCK, TFConstants.ID + ":trans_banister", new BanisterBlock(BlockBehaviour.Properties.copy(trans_planks)));
	public static final Block mine_planks                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock mine_stairs              = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_stairs", new StairBlock(mine_planks.defaultBlockState(), BlockBehaviour.Properties.copy(mine_planks)));
	public static final Block mine_slab                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_slab", new SlabBlock(BlockBehaviour.Properties.copy(mine_planks).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final Block mine_button                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(mine_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block mine_fence                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_fence", new FenceBlock(BlockBehaviour.Properties.copy(mine_planks)));
	public static final Block mine_gate                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(mine_planks)));
	public static final Block mine_plate                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(mine_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock mine_door                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_door", new DoorBlock(BlockBehaviour.Properties.copy(mine_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock mine_trapdoor         = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(mine_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock mine_sign         = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_sign", new TFSignBlock(BlockBehaviour.Properties.copy(mine_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MINING));
	public static final WallSignBlock mine_wall_sign        = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(mine_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), MINING));
	public static final BanisterBlock mine_banister         = Registry.register(Registry.BLOCK, TFConstants.ID + ":mine_banister", new BanisterBlock(BlockBehaviour.Properties.copy(mine_planks)));
	public static final Block sort_planks                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_planks", new Block(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final StairBlock sort_stairs              = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_stairs", new StairBlock(sort_planks.defaultBlockState(), BlockBehaviour.Properties.copy(sort_planks)));
	public static final Block sort_slab                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_slab", new SlabBlock(BlockBehaviour.Properties.copy(sort_planks).strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final Block sort_button                   = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_button", new WoodButtonBlock(BlockBehaviour.Properties.copy(sort_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final Block sort_fence                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_fence", new FenceBlock(BlockBehaviour.Properties.copy(sort_planks)));
	public static final Block sort_gate                     = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_gate", new FenceGateBlock(BlockBehaviour.Properties.copy(sort_planks)));
	public static final Block sort_plate                    = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_plate", new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.copy(sort_planks).noCollission().strength(0.5F).sound(SoundType.WOOD)));
	public static final DoorBlock sort_door                 = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_door", new DoorBlock(BlockBehaviour.Properties.copy(sort_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final TrapDoorBlock sort_trapdoor         = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_trapdoor", new TrapDoorBlock(BlockBehaviour.Properties.copy(sort_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion()));
	public static final StandingSignBlock sort_sign         = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_sign", new TFSignBlock(BlockBehaviour.Properties.copy(sort_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), SORTING));
	public static final WallSignBlock sort_wall_sign        = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_wall_sign", new TFWallSignBlock(BlockBehaviour.Properties.copy(sort_planks).strength(3.0F).sound(SoundType.WOOD).noOcclusion().noCollission(), SORTING));
	public static final BanisterBlock sort_banister         = Registry.register(Registry.BLOCK, TFConstants.ID + ":sort_banister", new BanisterBlock(BlockBehaviour.Properties.copy(sort_planks)));

	public static void registerItemblocks() {
		TFBlockItems.registerBlockItems();
		TFCompat.initCompatItems();
	}

	private static BlockBehaviour.Properties logProperties(MaterialColor color) {
		return logProperties(color, color);
	}

	private static BlockBehaviour.Properties logProperties(MaterialColor top, MaterialColor side) {
		return BlockBehaviour.Properties.of(Material.WOOD, (state) ->
				state.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? top : side);
	}

	public static void registerCompostor(float chance, ItemLike item) {
		CompostingChanceRegistry.INSTANCE.add(item, chance);
	}


	public static void tfCompostables() {
		registerCompostor(0.1F, fallen_leaves);
		registerCompostor(0.3F, canopy_leaves);
		registerCompostor(0.3F, clover_patch);
		registerCompostor(0.3F, dark_leaves);
		registerCompostor(0.3F, fiddlehead);
		registerCompostor(0.3F, hedge);
		registerCompostor(0.3F, mangrove_leaves);
		registerCompostor(0.3F, mayapple);
		registerCompostor(0.3F, mining_leaves);
		registerCompostor(0.3F, oak_leaves);
		registerCompostor(0.3F, rainboak_leaves);
		registerCompostor(0.3F, root_strand);
		registerCompostor(0.3F, sorting_leaves);
		registerCompostor(0.3F, thorn_leaves);
		registerCompostor(0.3F, time_leaves);
		registerCompostor(0.3F, transformation_leaves);
		registerCompostor(0.3F, oak_sapling);
		registerCompostor(0.3F, canopy_sapling);
		registerCompostor(0.3F, mangrove_sapling);
		registerCompostor(0.3F, darkwood_sapling);
		registerCompostor(0.3F, rainboak_sapling);
		registerCompostor(0.5F, beanstalk_leaves);
		registerCompostor(0.5F, moss_patch);
		registerCompostor(0.5F, root);
		registerCompostor(0.5F, thorn_rose);
		registerCompostor(0.5F, trollvidr);
		registerCompostor(0.5F, hollow_oak_sapling);
		registerCompostor(0.5F, time_sapling);
		registerCompostor(0.5F, transformation_sapling);
		registerCompostor(0.5F, mining_sapling);
		registerCompostor(0.5F, sorting_sapling);
		registerCompostor(0.5F, torchberry_plant);
		registerCompostor(0.65F, huge_mushgloom_stem);
		registerCompostor(0.65F, huge_waterlily);
		registerCompostor(0.65F, liveroot_block);
		registerCompostor(0.65F, mushgloom);
		registerCompostor(0.65F, uberous_soil);
		registerCompostor(0.65F, huge_stalk);
		registerCompostor(0.65F, unripe_trollber);
		registerCompostor(0.65F, trollber);
		registerCompostor(0.85F, huge_lilypad);
		registerCompostor(0.85F, huge_mushgloom);

		//eh, we'll do items here too
		registerCompostor(0.3F, TFItems.torchberries);
		registerCompostor(0.5F, TFItems.liveroot);
		registerCompostor(0.65F, TFItems.maze_wafer);
		registerCompostor(0.85F, TFItems.experiment_115);
		registerCompostor(0.85F, TFItems.magic_beans);
	}

	public static void TFBurnables() {
		FireBlock fireblock = (FireBlock)Blocks.FIRE;
		FlammableBlockRegistry.getDefaultInstance().add(root, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(liveroot_block, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(empty_bookshelf, 30, 20);
		FlammableBlockRegistry.getDefaultInstance().add(oak_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(twilight_oak_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(twilight_oak_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(twilight_oak_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(twilight_oak_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(twilight_oak_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(canopy_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(canopy_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(canopy_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(canopy_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(canopy_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(canopy_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mangrove_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(mangrove_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mangrove_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mangrove_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mangrove_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mangrove_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(dark_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(dark_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(dark_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(dark_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(dark_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(dark_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(time_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(time_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(time_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(time_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(time_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(time_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(transformation_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(trans_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(trans_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(trans_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(trans_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(trans_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mining_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(mine_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mine_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mine_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mine_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(mine_gate, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(sorting_wood, 5, 5);
		FlammableBlockRegistry.getDefaultInstance().add(sort_planks, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(sort_slab, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(sort_stairs, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(sort_fence, 5, 20);
		FlammableBlockRegistry.getDefaultInstance().add(sort_gate, 5, 20);
	}

	public static void TFPots() {
//		FlowerPotBlock pot = (FlowerPotBlock) Blocks.FLOWER_POT;
//
//		pot.addPlant(oak_sapling.getId(), potted_twilight_oak_sapling);
//		pot.addPlant(canopy_sapling.getId(), potted_canopy_sapling);
//		pot.addPlant(mangrove_sapling.getId(), potted_mangrove_sapling);
//		pot.addPlant(darkwood_sapling.getId(), potted_darkwood_sapling);
//		pot.addPlant(hollow_oak_sapling.getId(), potted_hollow_oak_sapling);
//		pot.addPlant(rainboak_sapling.getId(), potted_rainboak_sapling);
//		pot.addPlant(time_sapling.getId(), potted_time_sapling);
//		pot.addPlant(transformation_sapling.getId(), potted_trans_sapling);
//		pot.addPlant(mining_sapling.getId(), potted_mine_sapling);
//		pot.addPlant(sorting_sapling.getId(), potted_sort_sapling);
//		pot.addPlant(mayapple.getId(), potted_mayapple);
//		pot.addPlant(fiddlehead.getId(), potted_fiddlehead);
//		pot.addPlant(mushgloom.getId(), potted_mushgloom);
//		pot.addPlant(brown_thorns.getId(), potted_thorn);
//		pot.addPlant(green_thorns.getId(), potted_green_thorn);
//		pot.addPlant(burnt_thorns.getId(), potted_dead_thorn);
	}
}
